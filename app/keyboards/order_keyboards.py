"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
"""
from datetime import datetime, timedelta
from typing import List, Dict, Set
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from ..utils.constants import TIME_SLOTS, BUTTON_TEXTS, CALLBACK_DATA


def get_services_keyboard(services: List[Dict], page: int, total_pages: int, 
                         selected_services: Set[int], action_prefix: str = "order_service") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
    
    Args:
        services: –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        selected_services: –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
        action_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback'–æ–≤
    """
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —É—Å–ª—É–≥
    for service in services:
        service_id = service['id']
        name = service['name']
        price = service['price']
        
        if action_prefix == "order_service":
            checkmark = "‚úÖ " if service_id in selected_services else ""
            button_text = f"{checkmark}{name} - {price}‚ÇΩ"
        else:
            button_text = f"{name} - {price}‚ÇΩ"
        
        keyboard.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"{action_prefix}_{service_id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text=BUTTON_TEXTS['PREV'], 
            callback_data=f"{action_prefix}_page_{page-1}"
        ))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(
            text=BUTTON_TEXTS['NEXT'], 
            callback_data=f"{action_prefix}_page_{page+1}"
        ))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if action_prefix == "order_service":
        if selected_services:
            keyboard.append([InlineKeyboardButton(
                text=BUTTON_TEXTS['CONFIRM_ORDER'], 
                callback_data=CALLBACK_DATA['CONFIRM_ORDER']
            )])
        keyboard.append([InlineKeyboardButton(
            text=BUTTON_TEXTS['BACK_TO_MAIN'], 
            callback_data=CALLBACK_DATA['MAIN_MENU']
        )])
    elif action_prefix == "view_service":
        keyboard.append([InlineKeyboardButton(
            text=BUTTON_TEXTS['BACK_TO_MAIN'], 
            callback_data=CALLBACK_DATA['MAIN_MENU']
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_time_slots_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    keyboard = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(TIME_SLOTS), 3):
        row = []
        for j in range(i, min(i + 3, len(TIME_SLOTS))):
            row.append(InlineKeyboardButton(
                text=TIME_SLOTS[j], 
                callback_data=f"time_{TIME_SLOTS[j]}"
            ))
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(
        text=BUTTON_TEXTS['BACK'], 
        callback_data="back_to_services"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_dates_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    keyboard = []
    today = datetime.now()
    
    # –°–ª–µ–¥—É—é—â–∏–µ 14 –¥–Ω–µ–π
    for i in range(1, 15):
        date = today + timedelta(days=i)
        date_str = date.strftime("%d.%m")
        day_name = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][date.weekday()]
        button_text = f"{day_name} {date_str}"
        
        # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if i % 2 == 1:
            row = [InlineKeyboardButton(
                text=button_text, 
                callback_data=f"date_{date.strftime('%Y-%m-%d')}"
            )]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if i + 1 <= 14:
                next_date = today + timedelta(days=i + 1)
                next_date_str = next_date.strftime("%d.%m")
                next_day_name = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][next_date.weekday()]
                next_button_text = f"{next_day_name} {next_date_str}"
                row.append(InlineKeyboardButton(
                    text=next_button_text, 
                    callback_data=f"date_{next_date.strftime('%Y-%m-%d')}"
                ))
            
            keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(
        text=BUTTON_TEXTS['BACK'], 
        callback_data="back_to_time"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_address_selection_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞"""
    keyboard = [
        [InlineKeyboardButton(
            text="üè† –ê–¥—Ä–µ—Å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è", 
            callback_data="address_profile"
        )],
        [InlineKeyboardButton(
            text="üìç –î—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å", 
            callback_data="address_custom"
        )],
        [InlineKeyboardButton(
            text=BUTTON_TEXTS['BACK'], 
            callback_data="back_to_date"
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_order_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    keyboard = [
        [InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", 
            callback_data="final_confirm"
        )],
        [InlineKeyboardButton(
            text=BUTTON_TEXTS['CANCEL'], 
            callback_data=CALLBACK_DATA['MAIN_MENU']
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_masters_keyboard(masters: List[Dict], page: int = 0, total_pages: int = 1) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤
    for master in masters:
        master_id = master['id']
        name = master['name']
        experience = master['experience_years']
        rating = master['rating']
        
        button_text = f"{name} (–æ–ø—ã—Ç: {experience} –ª–µ—Ç, —Ä–µ–π—Ç–∏–Ω–≥: {rating}‚≠ê)"
        keyboard.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"master_{master_id}"
        )])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(
                text=BUTTON_TEXTS['PREV'], 
                callback_data=f"masters_page_{page-1}"
            ))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(
                text=BUTTON_TEXTS['NEXT'], 
                callback_data=f"masters_page_{page+1}"
            ))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(
        text=BUTTON_TEXTS['BACK_TO_MAIN'], 
        callback_data=CALLBACK_DATA['MAIN_MENU']
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_order_actions_keyboard(order_id: int, status: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–æ–º"""
    keyboard = []
    
    # –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if status == 'pending':
        keyboard.append([
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", 
                callback_data=f"cancel_order_{order_id}"
            )
        ])
    elif status == 'completed':
        keyboard.append([
            InlineKeyboardButton(
                text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", 
                callback_data=f"review_order_{order_id}"
            )
        ])
    
    # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.extend([
        [InlineKeyboardButton(
            text="üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞", 
            callback_data=f"order_details_{order_id}"
        )],
        [InlineKeyboardButton(
            text=BUTTON_TEXTS['BACK'], 
            callback_data=CALLBACK_DATA['ORDER_HISTORY']
        )]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_ai_services_keyboard(has_services: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    keyboard = []
    
    if has_services:
        keyboard.append([InlineKeyboardButton(
            text=BUTTON_TEXTS['ADD_TO_ORDER'], 
            callback_data=CALLBACK_DATA['ADD_AI_SERVICES']
        )])
    
    keyboard.extend([
        [InlineKeyboardButton(
            text="üîÑ –î—Ä—É–≥–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", 
            callback_data=CALLBACK_DATA['NEW_AI_CONSULTATION']
        )],
        [InlineKeyboardButton(
            text=BUTTON_TEXTS['BACK_TO_MAIN'], 
            callback_data=CALLBACK_DATA['MAIN_MENU']
        )]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_service_detail_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª—É–≥–∏"""
    keyboard = [
        [InlineKeyboardButton(
            text="üîô –ö —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥", 
            callback_data="back_to_services_catalog"
        )],
        [InlineKeyboardButton(
            text=BUTTON_TEXTS['BACK_TO_MAIN'], 
            callback_data=CALLBACK_DATA['MAIN_MENU']
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_master_detail_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton(
            text="üîô –ö —Å–ø–∏—Å–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤", 
            callback_data="back_to_masters_catalog"
        )],
        [InlineKeyboardButton(
            text=BUTTON_TEXTS['BACK_TO_MAIN'], 
            callback_data=CALLBACK_DATA['MAIN_MENU']
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_order_navigation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —ç—Ç–∞–ø–∞–º –∑–∞–∫–∞–∑–∞"""
    keyboard = [
        [
            InlineKeyboardButton(text="1Ô∏è‚É£ –£—Å–ª—É–≥–∏", callback_data="order_step_services"),
            InlineKeyboardButton(text="2Ô∏è‚É£ –í—Ä–µ–º—è", callback_data="order_step_time")
        ],
        [
            InlineKeyboardButton(text="3Ô∏è‚É£ –î–∞—Ç–∞", callback_data="order_step_date"),
            InlineKeyboardButton(text="4Ô∏è‚É£ –ê–¥—Ä–µ—Å", callback_data="order_step_address")
        ],
        [
            InlineKeyboardButton(
                text=BUTTON_TEXTS['CANCEL'], 
                callback_data=CALLBACK_DATA['MAIN_MENU']
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)