"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""
import asyncio
import logging
import sys
from typing import Any, Dict

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from .config import ConfigLoader, setup_logging, validate_config, BotConfig
from .database.connection import DatabaseManager
from .database.queries import DatabaseQueries
from .services.ai_service import AIConsultationService
from .keyboards.main_menu import get_main_menu_keyboard, get_main_menu_inline_keyboard
from .utils.constants import CALLBACK_DATA


class RepairBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self, config_path: str = "config.txt"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = ConfigLoader.load_from_file(config_path)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not validate_config(self.config):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = setup_logging(self.config)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.bot = Bot(token=self.config.bot_token)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.db_manager = DatabaseManager(self.config.db_path)
        self.db_queries = DatabaseQueries(self.config.db_path)
        self.ai_service = AIConsultationService(self.config.gemini_api_key)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-—Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è db_queries
        from .services.order_service import OrderService
        self.order_service = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ setup_middleware
        
        self.logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await self.db_manager.init_database()
            await self.db_manager.populate_test_data()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ë–î
            health_check = await self.db_manager.check_db_health()
            if health_check:
                self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                raise Exception("–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def setup_routers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –Ω–∞–ø—Ä—è–º—É—é (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç —á–µ—Ä–µ–∑ middleware)
            from .handlers.registration import registration_router
            from .handlers.orders import orders_router
            from .handlers.services import services_router
            from .handlers.profile import profile_router
            from .handlers.reviews import reviews_router
            from .handlers.ai_consultation import ai_router
            from .handlers.support import support_router
            from .handlers.admin import admin_router
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
            self.dp.include_router(registration_router)
            self.dp.include_router(admin_router)
            self.dp.include_router(orders_router)
            self.dp.include_router(services_router)
            self.dp.include_router(profile_router)
            self.dp.include_router(reviews_router)
            self.dp.include_router(ai_router)
            self.dp.include_router(support_router)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è make_order callback
            @self.dp.callback_query(F.data == "make_order")
            async def handle_make_order_callback(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries, user):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' –∏–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
                if not user:
                    await callback.answer("‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
                    return
                
                try:
                    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.delete()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboardMarkup  
                    await callback.message.answer(
                        "üõ†Ô∏è **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üõ†Ô∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
                        reply_markup=get_main_menu_keyboard(),
                        parse_mode='Markdown'
                    )
                    await callback.answer()
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_make_order_callback: {e}")
                    await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üõ†Ô∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
            
            # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            @self.dp.message(F.text.startswith("/admin"))
            async def handle_admin_commands(message: Message, db_queries: DatabaseQueries, config: BotConfig):
                """–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
                if not config.is_admin(message.from_user.id):
                    await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                    return
                
                try:
                    command_parts = message.text.split()
                    command = command_parts[0]
                    
                    if command == "/admin_complete":
                        # –ö–æ–º–∞–Ω–¥–∞: /admin_complete 12 (–∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ12)
                        if len(command_parts) < 2:
                            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_complete <order_id>")
                            return
                        
                        order_id = int(command_parts[1])
                        success = await db_queries.update_order_status(order_id, 'completed')
                        
                        if success:
                            await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å 'completed'")
                        else:
                            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}")
                    
                    elif command == "/admin_orders":
                        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        orders = await db_queries.get_user_orders(message.from_user.id, 10)
                        
                        if not orders:
                            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
                            return
                        
                        text = "üìã **–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:**\n\n"
                        for order in orders:
                            order_id = order['id']
                            status = order['status']
                            date = order['order_date']
                            text += f"‚Ññ{order_id} - {status} ({date})\n"
                        
                        text += f"\nüí° –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/admin_complete {orders[0]['id']}`"
                        
                        await message.answer(text, parse_mode='Markdown')
                    
                    elif command == "/admin_help":
                        await message.answer(
                            "üîß **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
                            "`/admin_orders` - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
                            "`/admin_complete <id>` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑\n"
                            "`/admin_help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                            "**–ü—Ä–∏–º–µ—Ä:** `/admin_complete 12`",
                            parse_mode='Markdown'
                        )
                    
                    else:
                        await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/admin_help`")
                
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –≤ admin –∫–æ–º–∞–Ω–¥–∞—Ö: {e}")
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
            general_router = Router()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
            general_router.message.register(self.handle_unknown_message)
            general_router.callback_query.register(self.handle_main_menu_callback, F.data == CALLBACK_DATA['MAIN_MENU'])
            general_router.callback_query.register(self.handle_unknown_callback)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Ä–æ—É—Ç–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏–º (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            self.dp.include_router(general_router)
            
            self.logger.info("‚úÖ –†–æ—É—Ç–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤: {e}")
            raise
    
    def setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º order_service –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ db_queries —É–∂–µ –≥–æ—Ç–æ–≤
            from .services.order_service import OrderService
            self.order_service = OrderService(self.db_queries)
            
            # Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            async def inject_dependencies(handler, event, data: Dict[str, Any]):
                data['db_queries'] = self.db_queries
                data['ai_service'] = self.ai_service
                data['order_service'] = self.order_service
                data['config'] = self.config  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                if hasattr(event, 'from_user') and event.from_user:
                    user = await self.db_queries.get_user(event.from_user.id)
                    data['user'] = user
                    data['is_registered'] = user is not None
                    data['is_admin'] = self.config.is_admin(event.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∞
                
                return await handler(event, data)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
            self.dp.message.middleware(inject_dependencies)
            self.dp.callback_query.middleware(inject_dependencies)
            
            self.logger.info("‚úÖ Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ middleware: {e}")
            raise
    
    async def handle_main_menu_callback(self, callback: CallbackQuery, state, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await state.clear()
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ inline —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboardMarkup
        await callback.message.answer(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
            reply_markup=get_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        await callback.answer()
    
    async def handle_unknown_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
        
        await message.answer(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=get_main_menu_keyboard()
        )
    
    async def handle_unknown_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤"""
        self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –æ—Ç {callback.from_user.id}: {callback.data}")
        
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
            reply_markup=get_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def setup_error_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""
        @self.dp.error()
        async def error_handler(event, exception):
            """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {exception}", exc_info=True)
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                if hasattr(event, 'message') and event.message:
                    await event.message.answer(
                        "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        reply_markup=get_main_menu_keyboard()
                    )
                elif hasattr(event, 'callback_query') and event.callback_query:
                    await event.callback_query.message.answer(
                        "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        reply_markup=get_main_menu_keyboard()
                    )
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            
            return True  # –ü–æ–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
    
    async def on_startup(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.setup_database()
            
            # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ middleware, –ø–æ—Ç–æ–º —Ä–æ—É—Ç–µ—Ä—ã!
            self.setup_middleware()
            
            # –¢–µ–ø–µ—Ä—å —Ä–æ—É—Ç–µ—Ä—ã (–æ–Ω–∏ –ø–æ–ª—É—á–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
            self.setup_routers()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
            await self.setup_error_handlers()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ò —Å–µ—Ä–≤–∏—Å
            if self.ai_service.is_available:
                self.logger.info("‚úÖ –ò–ò —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                self.logger.warning("‚ö†Ô∏è –ò–ò —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            self.logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            self.logger.info(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.config.log_level} —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
            self.logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.config.db_path}")
            self.logger.info(f"üë§ –ê–¥–º–∏–Ω—ã: {self.config.admin_ids}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            raise
    
    async def on_shutdown(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        try:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î
            backup_path = f"backup_{self.config.db_path}"
            await self.db_manager.backup_database(backup_path)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            await self.bot.session.close()
            
            self.logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            await self.on_startup()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(
                self.bot,
                on_startup=None,  # –£–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏
                on_shutdown=self.on_shutdown
            )
            
        except KeyboardInterrupt:
            self.logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã: {e}")
            raise
        finally:
            await self.on_shutdown()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = RepairBot()
        await bot.run()
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        sys.exit(1)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)