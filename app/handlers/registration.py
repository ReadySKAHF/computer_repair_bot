"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..database.queries import DatabaseQueries
from ..services.validation_service import ValidationService
from ..keyboards.main_menu import get_main_menu_keyboard
from ..utils.constants import SUCCESS_MESSAGES, SECTION_DESCRIPTIONS


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_address = State()


@registration_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, db_queries: DatabaseQueries):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        user = await db_queries.get_user(message.from_user.id)
        
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user['name']}! üëã\n\n"
                f"{SECTION_DESCRIPTIONS['MAIN_MENU']}",
                reply_markup=get_main_menu_keyboard(),
                parse_mode='Markdown'
            )
            await state.clear()
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —Ä–µ–º–æ–Ω—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤! üîß\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                parse_mode='Markdown'
            )
            await state.set_state(RegistrationStates.waiting_for_name)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )


@registration_router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        is_valid, error_msg, cleaned_data = ValidationService.validate_user_registration_data(
            name=message.text,
            phone="temp",  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∏
            address="temp"
        )
        
        if not is_valid and "–∏–º—è" in error_msg.lower():
            await message.answer(error_msg)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è
        await state.update_data(name=cleaned_data['name'])
        
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ +7 900 123 45 67\n"
            "‚Ä¢ 8 (900) 123-45-67\n"
            "‚Ä¢ 79001234567",
            parse_mode='Markdown'
        )
        await state.set_state(RegistrationStates.waiting_for_phone)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_name: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@registration_router.message(StateFilter(RegistrationStates.waiting_for_phone))
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        is_valid, error_msg, cleaned_data = ValidationService.validate_user_registration_data(
            name="temp",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            phone=message.text,
            address="temp"
        )
        
        if not is_valid and "—Ç–µ–ª–µ—Ñ–æ–Ω" in error_msg.lower():
            await message.answer(error_msg)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        await state.update_data(phone=cleaned_data['phone'])
        
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–µ–∑–¥–∞ –º–∞—Å—Ç–µ—Ä–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä: —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10, –∫–≤. 15\n"
            "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.",
            parse_mode='Markdown'
        )
        await state.set_state(RegistrationStates.waiting_for_address)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_phone: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@registration_router.message(StateFilter(RegistrationStates.waiting_for_address))
async def process_address(message: Message, state: FSMContext, db_queries: DatabaseQueries):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        is_valid, error_msg, cleaned_data = ValidationService.validate_user_registration_data(
            name=data.get('name', ''),
            phone=data.get('phone', ''),
            address=message.text
        )
        
        if not is_valid:
            if "–∞–¥—Ä–µ—Å" in error_msg.lower():
                await message.answer(error_msg)
                return
            else:
                # –û—à–∏–±–∫–∞ –≤ —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                await message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\n"
                    "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
                )
                await state.set_state(RegistrationStates.waiting_for_name)
                return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        success = await db_queries.create_user(
            user_id=message.from_user.id,
            name=cleaned_data['name'],
            phone=cleaned_data['phone'],
            address=cleaned_data['address']
        )
        
        if success:
            await message.answer(
                f"{SUCCESS_MESSAGES['REGISTRATION_COMPLETE']}\n\n"
                f"‚úÖ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**\n"
                f"üë§ –ò–º—è: {cleaned_data['name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {cleaned_data['phone']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {cleaned_data['address']}\n\n"
                f"{SECTION_DESCRIPTIONS['MAIN_MENU']}",
                reply_markup=get_main_menu_keyboard(),
                parse_mode='Markdown'
            )
            await state.clear()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            logging.info(
                f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: "
                f"ID={message.from_user.id}, "
                f"name={cleaned_data['name']}, "
                f"username={message.from_user.username}"
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start"
            )
            await state.clear()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_address: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start"
        )
        await state.clear()


@registration_router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext, db_queries: DatabaseQueries):
    """–ö–æ–º–∞–Ω–¥–∞ /register - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
    try:
        user = await db_queries.get_user(message.from_user.id)
        
        if user:
            await message.answer(
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ! üòä\n\n"
                f"üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**\n"
                f"–ò–º—è: {user['name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
                f"–ê–¥—Ä–µ—Å: {user['address']}\n\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª.",
                reply_markup=get_main_menu_keyboard(),
                parse_mode='Markdown'
            )
        else:
            await message.answer(
                "–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üìù\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            await state.set_state(RegistrationStates.waiting_for_name)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_register: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@registration_router.message(Command("profile"))
async def cmd_profile_shortcut(message: Message, db_queries: DatabaseQueries):
    """–ö–æ–º–∞–Ω–¥–∞ /profile - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    try:
        user = await db_queries.get_user(message.from_user.id)
        
        if user:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = user['created_at'][:10] if user['created_at'] else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            await message.answer(
                f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
                f"**–ò–º—è:** {user['name']}\n"
                f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {user['phone']}\n"
                f"**–ê–¥—Ä–µ—Å:** {user['address']}\n"
                f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {date_str}\n\n"
                "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
                reply_markup=get_main_menu_keyboard(),
                parse_mode='Markdown'
            )
        else:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_profile_shortcut: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationMiddleware:
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, db_queries: DatabaseQueries):
        self.db_queries = db_queries
    
    async def __call__(self, handler, event, data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        if hasattr(event, 'from_user') and event.from_user:
            user = await self.db_queries.get_user(event.from_user.id)
            data['user'] = user
            data['is_registered'] = user is not None
        
        return await handler(event, data)