"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..database.queries import DatabaseQueries
from ..services.validation_service import ValidationService
from ..keyboards.main_menu import get_main_menu_keyboard
from ..keyboards.profile_keyboards import (
    get_profile_keyboard, get_profile_edit_keyboard, 
    get_order_history_keyboard, get_order_details_keyboard,
    get_complete_order_keyboard
)
from ..utils.constants import (
    SECTION_DESCRIPTIONS, SUCCESS_MESSAGES, ORDER_STATUS_EMOJI, ORDER_STATUSES
)


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
profile_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
class ProfileEditStates(StatesGroup):
    editing_name = State()
    editing_phone = State()
    editing_address = State()


async def delete_current_message(message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await message.delete()
    except Exception:
        pass


# === –ü–†–û–°–ú–û–¢–† –ü–†–û–§–ò–õ–Ø ===

@profile_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message, state: FSMContext, user):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user:
        await message.answer(
            "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n"
            "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        return
    
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        date_str = user['created_at'][:10] if user['created_at'] else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        text = f"{SECTION_DESCRIPTIONS['PROFILE_INFO']}"
        text += f"**–ò–º—è:** {user['name']}\n"
        text += f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {user['phone']}\n"
        text += f"**–ê–¥—Ä–µ—Å:** {user['address']}\n"
        text += f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {date_str}\n\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º."
        
        keyboard = get_profile_keyboard()
        sent_message = await message.answer(
            text, 
            reply_markup=keyboard, 
            parse_mode='Markdown'
        )
        await state.update_data(current_message_id=sent_message.message_id)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_profile: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@profile_router.callback_query(F.data == "edit_profile")
async def edit_profile(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    keyboard = get_profile_edit_keyboard()
    
    await callback.message.edit_text(
        f"{SECTION_DESCRIPTIONS['PROFILE_EDITING']}",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    await callback.answer()


# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø ===

@profile_router.callback_query(F.data.startswith("edit_"))
async def handle_profile_editing(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        edit_type = callback.data.split("_")[1]
        
        if edit_type == "name":
            await callback.message.edit_text(
                "‚úèÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:\n\n"
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                "‚Ä¢ –û—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã",
                parse_mode='Markdown'
            )
            await state.set_state(ProfileEditStates.editing_name)
            
        elif edit_type == "phone":
            await callback.message.edit_text(
                "üìû **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                "‚Ä¢ +7 900 123 45 67\n"
                "‚Ä¢ 8 (900) 123-45-67\n"
                "‚Ä¢ 79001234567",
                parse_mode='Markdown'
            )
            await state.set_state(ProfileEditStates.editing_phone)
            
        elif edit_type == "address":
            await callback.message.edit_text(
                "üìç **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:\n\n"
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                "‚Ä¢ –û—Ç 10 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "‚Ä¢ –ü—Ä–∏–º–µ—Ä: —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10, –∫–≤. 15",
                parse_mode='Markdown'
            )
            await state.set_state(ProfileEditStates.editing_address)
        
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_profile_editing: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


@profile_router.message(ProfileEditStates.editing_name)
async def process_new_name(message: Message, state: FSMContext, db_queries: DatabaseQueries, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_current_message(message)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
        is_valid, error_msg, cleaned_value = ValidationService.validate_profile_update_data('name', message.text)
        
        if not is_valid:
            await message.answer(error_msg)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        success = await db_queries.update_user_field(message.from_user.id, "name", cleaned_value)
        
        if success:
            await message.answer(
                f"‚úÖ **–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                f"–ù–æ–≤–æ–µ –∏–º—è: **{cleaned_value}**\n\n"
                f"{SUCCESS_MESSAGES['PROFILE_UPDATED']}",
                reply_markup=get_main_menu_keyboard(is_admin=is_admin),
                parse_mode='Markdown'
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª –∏–º—è –Ω–∞ '{cleaned_value}'")
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        
        await state.clear()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_new_name: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        await state.clear()


@profile_router.message(ProfileEditStates.editing_phone)
async def process_new_phone(message: Message, state: FSMContext, db_queries: DatabaseQueries, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_current_message(message)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        is_valid, error_msg, cleaned_value = ValidationService.validate_profile_update_data('phone', message.text)
        
        if not is_valid:
            await message.answer(error_msg)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        success = await db_queries.update_user_field(message.from_user.id, "phone", cleaned_value)
        
        if success:
            await message.answer(
                f"‚úÖ **–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                f"–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: **{cleaned_value}**\n\n"
                f"{SUCCESS_MESSAGES['PROFILE_UPDATED']}",
                reply_markup=get_main_menu_keyboard(is_admin=is_admin),
                parse_mode='Markdown'
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª —Ç–µ–ª–µ—Ñ–æ–Ω")
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        
        await state.clear()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_new_phone: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        await state.clear()


@profile_router.message(ProfileEditStates.editing_address)
async def process_new_address(message: Message, state: FSMContext, db_queries: DatabaseQueries, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_current_message(message)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        is_valid, error_msg, cleaned_value = ValidationService.validate_profile_update_data('address', message.text)
        
        if not is_valid:
            await message.answer(error_msg)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        success = await db_queries.update_user_field(message.from_user.id, "address", cleaned_value)
        
        if success:
            await message.answer(
                f"‚úÖ **–ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                f"–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å: **{cleaned_value}**\n\n"
                f"{SUCCESS_MESSAGES['PROFILE_UPDATED']}",
                reply_markup=get_main_menu_keyboard(is_admin=is_admin),
                parse_mode='Markdown'
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª –∞–¥—Ä–µ—Å")
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        
        await state.clear()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_new_address: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        await state.clear()


# === –ò–°–¢–û–†–ò–Ø –ó–ê–ö–ê–ó–û–í –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô ===

@profile_router.callback_query(F.data == "order_history")
async def show_order_history(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)"""
    await show_order_history_page(callback, state, db_queries, page=0)


@profile_router.callback_query(F.data.startswith("order_history_page_"))
async def show_order_history_page_handler(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    try:
        page = int(callback.data.split("_")[-1])
        await show_order_history_page(callback, state, db_queries, page=page)
    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_order_history_page_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")


async def show_order_history_page(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries, page: int = 0):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    try:
        orders_per_page = 5
        offset = page * orders_per_page
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –∑–∞–ø–∞—Å–æ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        orders = await db_queries.get_user_orders(callback.from_user.id, orders_per_page + 1, offset)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ state
        await state.update_data(order_history_page=page)
        
        if not orders:
            if page == 0:
                # –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤–æ–æ–±—â–µ
                text = f"{SECTION_DESCRIPTIONS['ORDER_HISTORY']}"
                text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n"
                text += "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üõ†Ô∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
                ])
            else:
                # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é
                await show_order_history_page(callback, state, db_queries, page=max(0, page-1))
                return
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            has_next_page = len(orders) > orders_per_page
            current_page_orders = orders[:orders_per_page]
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            all_orders = await db_queries.get_user_orders(callback.from_user.id, 1000)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
            total_orders = len(all_orders) if all_orders else 0
            
            text = f"{SECTION_DESCRIPTIONS['ORDER_HISTORY']}"
            text += f"**–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:** {total_orders}\n"
            text += f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞:** {page + 1}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for order in current_page_orders:
                order_id = order['id']
                date = order['order_date']
                time = order['order_time']
                cost = order['total_cost']
                status = order['status']
                master_name = order['master_name']
                services = order['services']
                
                status_emoji = ORDER_STATUS_EMOJI.get(status, "‚ùì")
                status_text = ORDER_STATUSES.get(status, status)
                
                text += f"{status_emoji} **–ó–∞–∫–∞–∑ ‚Ññ{order_id}**\n"
                text += f"üìÖ {date} –≤ {time}\n"
                text += f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master_name}\n"
                text += f"üõ†Ô∏è –£—Å–ª—É–≥–∏: {services[:50]}{'...' if len(services) > 50 else ''}\n"
                text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ\n"
                text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            
            keyboard = get_order_history_keyboard(
                orders=current_page_orders, 
                page=page, 
                has_prev=(page > 0), 
                has_next=has_next_page
            )
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_order_history_page: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤")


@profile_router.callback_query(F.data.startswith("order_details_"))
async def show_order_details(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[2])
        order = await db_queries.get_order_by_id(order_id)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if order['user_id'] != callback.from_user.id:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        status_emoji = ORDER_STATUS_EMOJI.get(order['status'], "‚ùì")
        status_text = ORDER_STATUSES.get(order['status'], order['status'])
        
        text = f"üìã **–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order['id']}**\n\n"
        text += f"üìÖ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {order['order_date']} –≤ {order['order_time']}\n"
        text += f"üìä **–°—Ç–∞—Ç—É—Å:** {status_emoji} {status_text}\n"
        text += f"üë®‚Äçüîß **–ú–∞—Å—Ç–µ—Ä:** {order['master_name']}\n"
        text += f"üìç **–ê–¥—Ä–µ—Å:** {order['address']}\n"
        text += f"üõ†Ô∏è **–£—Å–ª—É–≥–∏:** {order['services']}\n"
        text += f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {order['total_cost']}‚ÇΩ\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if order['status'] == 'pending':
            text += f"\n‚è≥ **–ó–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.**\n"
            text += "–ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        elif order['status'] == 'confirmed':
            text += f"\n‚úÖ **–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.**\n"
            text += "–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–µ–¥–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
        elif order['status'] == 'in_progress':
            text += f"\nüîß **–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.**\n"
            text += "–ú–∞—Å—Ç–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π."
        elif order['status'] == 'completed':
            text += f"\n‚úÖ **–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω.**\n"
            text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤."
        elif order['status'] == 'cancelled':
            text += f"\n‚ùå **–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.**"
        
        keyboard = get_order_details_keyboard(order_id, order['status'])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_order_details: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_order_details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# === –ó–ê–í–ï–†–®–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ===

@profile_router.callback_query(F.data.startswith("complete_order_"))
async def complete_order_request(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[2])
        order = await db_queries.get_order_by_id(order_id)
        
        if not order or order['user_id'] != callback.from_user.id:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if order['status'] not in ['confirmed', 'in_progress']:
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å")
            return
        
        text = f"‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}**\n\n"
        text += "–†–∞–±–æ—Ç—ã –ø–æ –∑–∞–∫–∞–∑—É –≤—ã–ø–æ–ª–Ω–µ–Ω—ã?\n\n"
        text += f"**–î–∞—Ç–∞:** {order['order_date']} –≤ {order['order_time']}\n"
        text += f"**–ú–∞—Å—Ç–µ—Ä:** {order['master_name']}\n"
        text += f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {order['total_cost']}‚ÇΩ\n\n"
        text += "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –º–∞—Å—Ç–µ—Ä–∞."
        
        keyboard = get_complete_order_keyboard(order_id)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ complete_order_request: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")


@profile_router.callback_query(F.data.startswith("confirm_complete_"))
async def confirm_complete_order(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[2])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        success = await db_queries.update_order_status(order_id, 'completed')
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ **–ó–∞–∫–∞–∑ ‚Ññ{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –º–∞—Å—Ç–µ—Ä–∞.\n\n"
                "üí° **–°–æ–≤–µ—Ç:** –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä!",
                parse_mode='Markdown'
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑ {order_id}")
        else:
            await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.",
                parse_mode='Markdown'
            )
        
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ confirm_complete_order: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")


# === –û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê ===

@profile_router.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order_request(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[2])
        order = await db_queries.get_order_by_id(order_id)
        
        if not order or order['user_id'] != callback.from_user.id:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if order['status'] not in ['pending', 'confirmed']:
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å")
            return
        
        text = f"‚ùå **–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}**\n\n"
        text += "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?\n\n"
        text += f"**–î–∞—Ç–∞:** {order['order_date']} –≤ {order['order_time']}\n"
        text += f"**–ú–∞—Å—Ç–µ—Ä:** {order['master_name']}\n"
        text += f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {order['total_cost']}‚ÇΩ"
        
        from ..keyboards.profile_keyboards import get_cancel_order_keyboard
        keyboard = get_cancel_order_keyboard(order_id)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cancel_order_request: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–º–µ–Ω—ã")


@profile_router.callback_query(F.data.startswith("confirm_cancel_"))
async def confirm_cancel_order(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[2])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        success = await db_queries.update_order_status(order_id, 'cancelled')
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ **–ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
                "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode='Markdown'
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ {order_id}")
        else:
            await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.",
                parse_mode='Markdown'
            )
        
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ confirm_cancel_order: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞")


# === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===

@profile_router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery, user):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        date_str = user['created_at'][:10] if user['created_at'] else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        text = f"{SECTION_DESCRIPTIONS['PROFILE_INFO']}"
        text += f"**–ò–º—è:** {user['name']}\n"
        text += f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {user['phone']}\n"
        text += f"**–ê–¥—Ä–µ—Å:** {user['address']}\n"
        text += f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {date_str}\n\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º."
        
        keyboard = get_profile_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_profile: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é")


@profile_router.callback_query(F.data == "back_to_order_history")
async def back_to_order_history(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ state
        data = await state.get_data()
        page = data.get('order_history_page', 0)
        
        await show_order_history_page(callback, state, db_queries, page=page)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_order_history: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_order_history_page(callback, state, db_queries, page=0)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@profile_router.message(F.text == "/admin_test_orders")
async def admin_test_orders(message: Message, db_queries: DatabaseQueries):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"""
    admin_ids = [123456789, 987654321]  # –í–∞—à–∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ ID
    
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders = await db_queries.get_user_orders(message.from_user.id, 5)
        
        if not orders:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        text = "üîß **–ê–¥–º–∏–Ω: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏**\n\n"
        
        for order in orders:
            order_id = order['id']
            status = order['status']
            date = order['order_date']
            
            text += f"**–ó–∞–∫–∞–∑ ‚Ññ{order_id}** ({date})\n"
            text += f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å –∞–¥–º–∏–Ω–∫–æ–π", 
                callback_data="admin_order_history"
            )],
            [InlineKeyboardButton(
                text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="main_menu"
            )]
        ])
        
        await message.answer(text, reply_markup=keyboard, parse_mode='Markdown')
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_test_orders: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")