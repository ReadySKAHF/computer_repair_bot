"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ª—É–≥ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..database.queries import DatabaseQueries
from ..keyboards.order_keyboards import (
    get_services_keyboard, get_service_detail_keyboard,
    get_masters_keyboard, get_master_detail_keyboard
)
from ..utils.constants import SECTION_DESCRIPTIONS, LIMITS


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É—Å–ª—É–≥
services_router = Router()


# === –ö–ê–¢–ê–õ–û–ì –£–°–õ–£–ì ===

@services_router.message(F.text == "üìã –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥")
async def show_services_catalog(message: Message, state: FSMContext, db_queries: DatabaseQueries):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥"""
    try:
        services = await db_queries.get_services(0, LIMITS['MAX_SERVICES_PER_PAGE'])
        total_services = await db_queries.get_services_count()
        total_pages = (total_services + LIMITS['MAX_SERVICES_PER_PAGE'] - 1) // LIMITS['MAX_SERVICES_PER_PAGE']
        
        if not services:
            await message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            return
        
        await state.update_data(view_services_page=0)
        
        keyboard = get_services_keyboard(services, 0, total_pages, set(), "view_service")
        sent_message = await message.answer(
            f"{SECTION_DESCRIPTIONS['SERVICE_CATALOG']}\n\n"
            f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}**",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        await state.update_data(current_message_id=sent_message.message_id)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_services_catalog: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@services_router.callback_query(F.data.startswith("view_service_"))
async def handle_service_view(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª—É–≥"""
    try:
        callback_parts = callback.data.split("_")
        
        if len(callback_parts) >= 4 and callback_parts[2] == "page":
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            page = int(callback_parts[3])
            await handle_services_catalog_pagination(callback, state, db_queries, page)
        else:
            # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏
            service_id = int(callback_parts[2])
            await show_service_details(callback, state, db_queries, service_id)
    
    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_service_view: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_service_view: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_services_catalog_pagination(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries, page: int):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥"""
    try:
        await state.update_data(view_services_page=page)
        
        services = await db_queries.get_services(page, LIMITS['MAX_SERVICES_PER_PAGE'])
        total_services = await db_queries.get_services_count()
        total_pages = (total_services + LIMITS['MAX_SERVICES_PER_PAGE'] - 1) // LIMITS['MAX_SERVICES_PER_PAGE']
        
        keyboard = get_services_keyboard(services, page, total_pages, set(), "view_service")
        await callback.message.edit_text(
            f"{SECTION_DESCRIPTIONS['SERVICE_CATALOG']}\n\n"
            f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}**",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_services_catalog_pagination: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É")


async def show_service_details(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries, service_id: int):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ"""
    try:
        service = await db_queries.get_service_by_id(service_id)
        
        if not service:
            await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        duration = service['duration_minutes']
        if duration >= 60:
            hours = duration // 60
            minutes = duration % 60
            duration_str = f"{hours} —á"
            if minutes > 0:
                duration_str += f" {minutes} –º–∏–Ω"
        else:
            duration_str = f"{duration} –º–∏–Ω"
        
        text = f"üõ†Ô∏è **{service['name']}**\n\n"
        text += f"üí∞ **–¶–µ–Ω–∞:** {service['price']}‚ÇΩ\n"
        text += f"‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {duration_str}\n\n"
        text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{service['description']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞' in service['name'].lower():
            text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–∞–∫ –ø–µ—Ä–≤—ã–π —à–∞–≥** –ø—Ä–∏ –Ω–µ—è—Å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º."
        elif '—á–∏—Å—Ç–∫–∞' in service['name'].lower():
            text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–æ–¥–∏—Ç—å** –∫–∞–∂–¥—ã–µ 6-12 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
        elif '—Ç–µ—Ä–º–æ–ø–∞—Å—Ç–∞' in service['name'].lower():
            text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–µ–Ω—è—Ç—å** –∫–∞–∂–¥—ã–µ 2-3 –≥–æ–¥–∞ –∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä–µ–≤–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞."
        elif 'windows' in service['name'].lower():
            text += "üí° **–í–∫–ª—é—á–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É** –±–∞–∑–æ–≤—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º."
        
        keyboard = get_service_detail_keyboard()
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_service_details: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ")


@services_router.callback_query(F.data == "back_to_services_catalog")
async def back_to_services_catalog(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–∞–ª–æ–≥—É —É—Å–ª—É–≥"""
    try:
        data = await state.get_data()
        page = data.get('view_services_page', 0)
        
        services = await db_queries.get_services(page, LIMITS['MAX_SERVICES_PER_PAGE'])
        total_services = await db_queries.get_services_count()
        total_pages = (total_services + LIMITS['MAX_SERVICES_PER_PAGE'] - 1) // LIMITS['MAX_SERVICES_PER_PAGE']
        
        keyboard = get_services_keyboard(services, page, total_pages, set(), "view_service")
        await callback.message.edit_text(
            f"{SECTION_DESCRIPTIONS['SERVICE_CATALOG']}\n\n"
            f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}**",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_services_catalog: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–∞–ª–æ–≥—É")


# === –ú–ê–°–¢–ï–†–ê ===

@services_router.message(F.text == "üë• –ú–∞—Å—Ç–µ—Ä–∞")
async def show_masters_list(message: Message, state: FSMContext, db_queries: DatabaseQueries):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤"""
    try:
        masters = await db_queries.get_masters(0, LIMITS['MAX_MASTERS_PER_PAGE'])
        total_masters = await db_queries.get_masters_count()
        total_pages = (total_masters + LIMITS['MAX_MASTERS_PER_PAGE'] - 1) // LIMITS['MAX_MASTERS_PER_PAGE']
        
        if not masters:
            await message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            return
        
        keyboard = get_masters_keyboard(masters, 0, total_pages)
        sent_message = await message.answer(
            f"{SECTION_DESCRIPTIONS['MASTERS_LIST']}\n\n"
            f"**–í—Å–µ–≥–æ –º–∞—Å—Ç–µ—Ä–æ–≤:** {total_masters}",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        await state.update_data(current_message_id=sent_message.message_id)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_masters_list: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@services_router.callback_query(F.data.startswith("master_"))
async def view_master_details(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–µ"""
    try:
        master_id = int(callback.data.split("_")[1])
        master = await db_queries.get_master_by_id(master_id)
        
        if not master:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
        experience = master['experience_years']
        if experience == 1:
            exp_text = "1 –≥–æ–¥"
        elif 2 <= experience <= 4:
            exp_text = f"{experience} –≥–æ–¥–∞"
        else:
            exp_text = f"{experience} –ª–µ—Ç"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
        if master['rating'] >= 4.8:
            quality_text = "–û–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤!"
        elif master['rating'] >= 4.5:
            quality_text = "–í—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç."
        else:
            quality_text = "–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä —Å —Ö–æ—Ä–æ—à–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏."
        
        if experience >= 7:
            exp_desc = "–≠–∫—Å–ø–µ—Ä—Ç —Å –±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã."
        elif experience >= 4:
            exp_desc = "–û–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç."
        else:
            exp_desc = "–ú–æ–ª–æ–¥–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –º–∞—Å—Ç–µ—Ä."
        
        text = f"üë®‚Äçüîß **{master['name']}**\n\n"
        text += f"üéØ **–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:** {exp_text}\n"
        text += f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {master['rating']}/5.0\n\n"
        text += f"üìã **–û –º–∞—Å—Ç–µ—Ä–µ:**\n{quality_text} {exp_desc}\n\n"
        text += "üîß **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:**\n"
        text += "‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤\n"
        text += "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ü–û\n"
        text += "‚Ä¢ –ß–∏—Å—Ç–∫–∞ –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞\n"
        text += "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
        
        keyboard = get_master_detail_keyboard()
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ view_master_details: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ view_master_details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@services_router.callback_query(F.data == "back_to_masters_catalog")
async def back_to_masters_catalog(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤"""
    try:
        masters = await db_queries.get_masters(0, LIMITS['MAX_MASTERS_PER_PAGE'])
        total_masters = await db_queries.get_masters_count()
        total_pages = (total_masters + LIMITS['MAX_MASTERS_PER_PAGE'] - 1) // LIMITS['MAX_MASTERS_PER_PAGE']
        
        keyboard = get_masters_keyboard(masters, 0, total_pages)
        await callback.message.edit_text(
            f"{SECTION_DESCRIPTIONS['MASTERS_LIST']}\n\n"
            f"**–í—Å–µ–≥–æ –º–∞—Å—Ç–µ—Ä–æ–≤:** {total_masters}",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_masters_catalog: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤")


# === –ü–û–ò–°–ö –£–°–õ–£–ì ===

@services_router.message(F.text.startswith("üîç"))
async def search_services(message: Message, db_queries: DatabaseQueries):
    """–ü–æ–∏—Å–∫ —É—Å–ª—É–≥ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = message.text.replace("üîç", "").strip()
        
        if len(query) < 3:
            await message.answer(
                "üîç **–ü–æ–∏—Å–∫ —É—Å–ª—É–≥**\n\n"
                "–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: `üîç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞`",
                parse_mode='Markdown'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        all_services = await db_queries.get_services(0, 100)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —É—Å–ª—É–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ª—É–≥–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        found_services = []
        query_lower = query.lower()
        
        for service in all_services:
            if (query_lower in service['name'].lower() or 
                query_lower in service['description'].lower()):
                found_services.append(service)
        
        if not found_services:
            await message.answer(
                f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: ¬´{query}¬ª**\n\n"
                "‚ùå –£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥.",
                parse_mode='Markdown'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: ¬´{query}¬ª**\n\n"
        text += f"–ù–∞–π–¥–µ–Ω–æ —É—Å–ª—É–≥: **{len(found_services)}**\n\n"
        
        for i, service in enumerate(found_services[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
            text += f"{i}. **{service['name']}** - {service['price']}‚ÇΩ\n"
            text += f"   _{service['description'][:60]}..._\n\n"
        
        if len(found_services) > 10:
            text += f"... –∏ –µ—â–µ {len(found_services) - 10} —É—Å–ª—É–≥.\n\n"
        
        text += "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìã –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥¬ª."
        
        await message.answer(text, parse_mode='Markdown')
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ search_services: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—Å–ª—É–≥.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


# === –ü–û–ü–£–õ–Ø–†–ù–´–ï –£–°–õ–£–ì–ò ===

@services_router.callback_query(F.data == "popular_services")
async def show_popular_services(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–ü–æ–∫–∞–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å–ª—É–≥"""
    try:
        # ID –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å–ª—É–≥ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã)
        popular_service_ids = [1, 2, 3, 4, 9]  # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, —á–∏—Å—Ç–∫–∞, —Ç–µ—Ä–º–æ–ø–∞—Å—Ç–∞, Windows, –∞–Ω—Ç–∏–≤–∏—Ä—É—Å
        
        text = "üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏**\n\n"
        
        for i, service_id in enumerate(popular_service_ids, 1):
            service = await db_queries.get_service_by_id(service_id)
            if service:
                text += f"{i}. **{service['name']}** - {service['price']}‚ÇΩ\n"
                text += f"   ‚è±Ô∏è {service['duration_minutes']} –º–∏–Ω\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞!"
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõ†Ô∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order")],
            [InlineKeyboardButton(text="üìã –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥", callback_data="view_all_services")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_popular_services: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å–ª—É–≥")