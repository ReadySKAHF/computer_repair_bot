"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from ..database.queries import DatabaseQueries
from ..config import BotConfig
from ..keyboards.main_menu import get_main_menu_keyboard


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
admin_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
class AdminSupportStates(StatesGroup):
    responding_to_request = State()


def get_admin_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_all_orders"),
            InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="admin_support_management")
        ],
        [
            InlineKeyboardButton(text="ü§ñ –ò–ò —Å–µ—Ä–≤–∏—Å", callback_data="admin_ai"),
            InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton(text="üì• –ë—ç–∫–∞–ø –ë–î", callback_data="admin_backup"),
            InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data="admin_reload")
        ],
        [
            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])
    return keyboard


@admin_router.message(Command("admin"))
async def show_admin_panel(message: Message, state: FSMContext, db_queries: DatabaseQueries, config: BotConfig):
    """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db_queries.get_statistics()
        
        text = "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        text += f"**–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        text += f"üìã –ó–∞–∫–∞–∑–æ–≤: {stats.get('total_orders', 0)}\n"
        text += f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats.get('average_rating', 0)}\n"
        text += f"üí¨ –û–±—Ä–∞—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('support_requests_today', 0)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        
        keyboard = get_admin_main_keyboard()
        await message.answer(text, reply_markup=keyboard, parse_mode='Markdown')
        await state.clear()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_panel: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")


@admin_router.callback_query(F.data == "admin_stats")
async def show_admin_statistics(callback: CallbackQuery, db_queries: DatabaseQueries, config: BotConfig):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        stats = await db_queries.get_statistics()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º
        status_counts = {
            'pending': await db_queries.get_orders_count('pending'),
            'confirmed': await db_queries.get_orders_count('confirmed'),
            'in_progress': await db_queries.get_orders_count('in_progress'),
            'completed': await db_queries.get_orders_count('completed'),
            'cancelled': await db_queries.get_orders_count('cancelled')
        }
        
        text = "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        text += f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('total_users', 0)}\n\n"
        
        text += f"**–ó–∞–∫–∞–∑—ã:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_orders', 0)}\n"
        text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.get('orders_today', 0)}\n"
        
        status_names = {
            'pending': '–û–∂–∏–¥–∞—é—Ç',
            'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω—ã',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω—ã'
        }
        
        for status, count in status_counts.items():
            if count > 0:
                status_name = status_names.get(status, status)
                text += f"‚Ä¢ {status_name}: {count}\n"
        
        text += f"\n**–û—Ç–∑—ã–≤—ã:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats.get('total_reviews', 0)}\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats.get('average_rating', 0)}\n"
        
        text += f"\n**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**\n"
        text += f"‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('support_requests_today', 0)}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_statistics: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò ===

@admin_router.callback_query(F.data == "admin_all_orders")
async def show_all_orders_management(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries, config: BotConfig):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∑–∞–∫–∞–∑–∞–º–∏"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º
        total_orders = await db_queries.get_orders_count()
        pending_orders = await db_queries.get_orders_count('pending')
        completed_orders = await db_queries.get_orders_count('completed')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
        recent_orders = await db_queries.get_all_orders(10)
        
        text = "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∑–∞–∫–∞–∑–∞–º–∏**\n\n"
        text += f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        text += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {pending_orders}\n"
        text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_orders}\n\n"
        
        text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:**\n"
        for order in recent_orders[:5]:
            status_emoji = {"pending": "‚è≥", "confirmed": "‚úÖ", "in_progress": "üîß", "completed": "‚úÖ", "cancelled": "‚ùå"}.get(order['status'], "‚ùì")
            text += f"{status_emoji} ‚Ññ{order['id']} - {order['user_name']} ({order['status']})\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", callback_data="admin_orders_list"),
                InlineKeyboardButton(text="üîÑ –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º", callback_data="admin_orders_by_status")
            ],
            [
                InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ", callback_data="admin_complete_all_orders"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", callback_data="admin_cancel_all_orders")
            ],
            [
                InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_all_orders_management: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")


@admin_router.callback_query(F.data == "admin_orders_list")
async def show_orders_list(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries, config: BotConfig):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        orders = await db_queries.get_all_orders(20)
        
        if not orders:
            text = "üìã **–í—Å–µ –∑–∞–∫–∞–∑—ã**\n\n–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = f"üìã **–í—Å–µ –∑–∞–∫–∞–∑—ã** (–ø–æ–∫–∞–∑–∞–Ω–æ {len(orders)})\n\n"
            
            for order in orders:
                status_emoji = {
                    "pending": "‚è≥", "confirmed": "‚úÖ", "in_progress": "üîß", 
                    "completed": "‚úÖ", "cancelled": "‚ùå"
                }.get(order['status'], "‚ùì")
                
                text += f"{status_emoji} **‚Ññ{order['id']}** - {order['user_name']}\n"
                text += f"‚îú –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                text += f"‚îú –î–∞—Ç–∞: {order['order_date']} –≤ {order['order_time']}\n"
                text += f"‚îú –°—Ç–æ–∏–º–æ—Å—Ç—å: {order['total_cost']}‚ÇΩ\n"
                text += f"‚îî –£—Å–ª—É–≥–∏: {order['services'][:50]}...\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="admin_filter_pending"),
                InlineKeyboardButton(text="üîß –í —Ä–∞–±–æ—Ç–µ", callback_data="admin_filter_progress")
            ],
            [
                InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="admin_complete_all_orders")
            ],
            [
                InlineKeyboardButton(text="üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data="admin_all_orders")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_orders_list: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤")


@admin_router.callback_query(F.data == "admin_complete_all_orders")
async def complete_all_orders(callback: CallbackQuery, db_queries: DatabaseQueries, config: BotConfig):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ", callback_data="confirm_complete_all"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_all_orders")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è**\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    await callback.answer()


@admin_router.callback_query(F.data == "confirm_complete_all")
async def confirm_complete_all_orders(callback: CallbackQuery, db_queries: DatabaseQueries, config: BotConfig):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        success = await db_queries.bulk_update_orders_status('completed')
        
        if success:
            text = "‚úÖ **–ú–∞—Å—Å–æ–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ**\n\n–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å 'completed'"
        else:
            text = "‚ùå **–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="admin_orders_list")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
        
        logging.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ confirm_complete_all_orders: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤")


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–î–ï–†–ñ–ö–û–ô ===

@admin_router.callback_query(F.data == "admin_support_management")
async def show_support_management(callback: CallbackQuery, db_queries: DatabaseQueries, config: BotConfig):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—â–µ–Ω–∏–π
        all_requests = await db_queries.get_support_requests_for_admin()
        new_requests = await db_queries.get_support_requests_for_admin('new')
        answered_requests = await db_queries.get_support_requests_for_admin('answered')
        
        text = "üí¨ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π**\n\n"
        text += f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {len(all_requests) if all_requests else 0}\n"
        text += f"‚Ä¢ –ù–æ–≤—ã—Ö: {len(new_requests) if new_requests else 0}\n"
        text += f"‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö: {len(answered_requests) if answered_requests else 0}\n\n"
        
        if new_requests:
            text += f"**–ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:**\n"
            for req in new_requests[:3]:
                preview = req['message'][:50] + "..." if len(req['message']) > 50 else req['message']
                text += f"‚Ä¢ {req['user_name']}: {preview}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="admin_new_support"),
                InlineKeyboardButton(text="‚úÖ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ", callback_data="admin_answered_support")
            ],
            [
                InlineKeyboardButton(text="üìã –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="admin_all_support")
            ],
            [
                InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_support_management: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")


@admin_router.callback_query(F.data == "admin_new_support")
async def show_new_support_requests(callback: CallbackQuery, db_queries: DatabaseQueries, config: BotConfig):
    """–ü–æ–∫–∞–∑ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        new_requests = await db_queries.get_support_requests_for_admin('new', 10)
        
        if not new_requests:
            text = "üìù **–ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è**\n\n–ù–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ—Ç!"
        else:
            text = f"üìù **–ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è** ({len(new_requests)})\n\n"
            
            for req in new_requests:
                text += f"**#{req['id']} –æ—Ç {req['user_name']}**\n"
                text += f"üìû {req['user_phone']}\n"
                text += f"üìÖ {req['created_at']}\n"
                text += f"üí¨ {req['message']}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–∂–¥–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        keyboard_buttons = []
        if new_requests:
            for req in new_requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å #{req['id']}", 
                        callback_data=f"admin_respond_{req['id']}"
                    )
                ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="admin_support_management")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_new_support_requests: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π")


@admin_router.callback_query(F.data.startswith("admin_respond_"))
async def start_respond_to_support(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries, config: BotConfig):
    """–ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        request_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
        all_requests = await db_queries.get_support_requests_for_admin()
        request_info = next((r for r in all_requests if r['id'] == request_id), None)
        
        if not request_info:
            await callback.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ state
        await state.update_data(support_request_id=request_id)
        await state.set_state(AdminSupportStates.responding_to_request)
        
        text = f"üí¨ **–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{request_id}**\n\n"
        text += f"**–û—Ç:** {request_info['user_name']}\n"
        text += f"**–î–∞—Ç–∞:** {request_info['created_at']}\n"
        text += f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {request_info['message']}\n\n"
        text += f"**–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:**"
        
        await callback.message.edit_text(text, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_respond_to_support: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞")


@admin_router.message(AdminSupportStates.responding_to_request)
async def process_admin_response(message: Message, state: FSMContext, db_queries: DatabaseQueries, config: BotConfig):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        data = await state.get_data()
        request_id = data.get('support_request_id')
        
        if not request_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
        success = await db_queries.respond_to_support_request(
            request_id, message.from_user.id, message.text
        )
        
        if success:
            await message.answer(
                f"‚úÖ **–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n"
                f"–í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{request_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª–∏.",
                parse_mode='Markdown'
            )
            logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ {request_id}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
        
        await state.clear()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_admin_response: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
        await state.clear()


# === –û–°–¢–ê–õ–¨–ù–´–ï ADMIN HANDLERS ===

@admin_router.callback_query(F.data == "admin_users")
async def show_admin_users(callback: CallbackQuery, db_queries: DatabaseQueries, config: BotConfig):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        stats = await db_queries.get_statistics()
        
        text = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
        text += f"**–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: –ø–æ–¥—Å—á–µ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
        text += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: –ø–æ–¥—Å—á–µ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        
        text += f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
        text += f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        text += f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        text += f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_user_stats")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_users: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@admin_router.callback_query(F.data == "admin_ai")
async def show_admin_ai(callback: CallbackQuery, ai_service, config: BotConfig):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò —Å–µ—Ä–≤–∏—Å–æ–º"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ò–ò —Å–µ—Ä–≤–∏—Å–∞
        is_available = ai_service.check_service_availability() if ai_service else False
        
        text = "ü§ñ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò —Å–µ—Ä–≤–∏—Å–æ–º**\n\n"
        text += f"**–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:** {'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' if is_available else 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
        text += f"**–ú–æ–¥–µ–ª—å:** Gemini 1.5 Flash\n"
        text += f"**–†–µ–∑–µ—Ä–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞:** –í–∫–ª—é—á–µ–Ω–∞\n\n"
        
        if is_available:
            text += "‚úÖ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
            text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –ø–æ–ª–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò"
        else:
            text += "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ò–ò —Å–µ—Ä–≤–∏—Å–æ–º\n"
            text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="admin_ai_check")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò", callback_data="admin_ai_stats")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_ai: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ò–ò")


@admin_router.callback_query(F.data == "admin_backup")
async def create_backup(callback: CallbackQuery, config: BotConfig):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from ..database.connection import DatabaseManager
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        db_manager = DatabaseManager()
        backup_path = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
        success = await db_manager.backup_database(backup_path)
        
        if success:
            text = f"‚úÖ **–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞**\n\n"
            text += f"–§–∞–π–ª: `{backup_path}`\n"
            text += f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        else:
            text = "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏**\n\n"
            text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω", callback_data="admin_backup")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ create_backup: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")


@admin_router.callback_query(F.data == "admin_main")
async def back_to_admin_main(callback: CallbackQuery, db_queries: DatabaseQueries, config: BotConfig):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        stats = await db_queries.get_statistics()
        
        text = "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        text += f"**–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        text += f"üìã –ó–∞–∫–∞–∑–æ–≤: {stats.get('total_orders', 0)}\n"
        text += f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats.get('average_rating', 0)}\n"
        text += f"üí¨ –û–±—Ä–∞—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('support_requests_today', 0)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        
        keyboard = get_admin_main_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_admin_main: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")


# === –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===

@admin_router.message(Command("admin_complete"))
async def admin_complete_order(message: Message, db_queries: DatabaseQueries, config: BotConfig):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer(
                "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/admin_complete <order_id>`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** `/admin_complete 15`",
                parse_mode='Markdown'
            )
            return
        
        order_id = int(command_parts[1])
        success = await db_queries.update_order_status(order_id, 'completed')
        
        if success:
            await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å 'completed'")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_complete_order: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@admin_router.message(Command("admin_cancel"))
async def admin_cancel_order(message: Message, db_queries: DatabaseQueries, config: BotConfig):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer(
                "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/admin_cancel <order_id>`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** `/admin_cancel 15`",
                parse_mode='Markdown'
            )
            return
        
        order_id = int(command_parts[1])
        success = await db_queries.update_order_status(order_id, 'cancelled')
        
        if success:
            await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–º–µ–Ω–µ–Ω")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_cancel_order: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@admin_router.message(Command("admin_orders"))
async def show_admin_user_orders(message: Message, db_queries: DatabaseQueries, config: BotConfig):
    """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∞–¥–º–∏–Ω–∞
        orders = await db_queries.get_user_orders(message.from_user.id, 10)
        
        if not orders:
            await message.answer(
                "üìã **–í–∞—à–∏ –∑–∞–∫–∞–∑—ã**\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑:\n"
                "üõ†Ô∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏ ‚Üí –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑"
            )
            return
        
        text = "üìã **–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n\n"
        
        for order in orders:
            order_id = order['id']
            status = order['status']
            date = order['order_date']
            cost = order['total_cost']
            
            status_emoji = {
                'pending': '‚è≥',
                'confirmed': '‚úÖ', 
                'in_progress': 'üîß',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(status, '‚ùì')
            
            text += f"{status_emoji} **–ó–∞–∫–∞–∑ ‚Ññ{order_id}**\n"
            text += f"‚îú –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"‚îú –î–∞—Ç–∞: {date}\n"
            text += f"‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ\n\n"
        
        text += "**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
        text += f"`/admin_complete {orders[0]['id']}` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{orders[0]['id']}\n"
        text += f"`/admin_cancel {orders[0]['id']}` - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{orders[0]['id']}"
        
        await message.answer(text, parse_mode='Markdown')
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_user_orders: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")


@admin_router.message(Command("get_id"))
async def get_user_id(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ Telegram ID"""
    await message.answer(
        f"üÜî **–í–∞—à Telegram ID:** `{message.from_user.id}`\n\n"
        f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"‚Ä¢ –ò–º—è: {message.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"‚Ä¢ Username: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚Ä¢ ID: `{message.from_user.id}`\n\n"
        f"üí° **–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∫–∏:**\n"
        f"–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à ID –≤ —Ñ–∞–π–ª config.txt:\n"
        f"`ADMIN_IDS={message.from_user.id},1003589165`",
        parse_mode='Markdown'
    )


@admin_router.message(Command("admin_help"))
async def show_admin_help(message: Message, config: BotConfig):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    text = "üîß **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º**\n\n"
    text += "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
    text += "`/admin` - –≥–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
    text += "`/get_id` - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID\n"
    text += "`/admin_help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
    
    text += "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:**\n"
    text += "`/admin_orders` - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
    text += "`/admin_complete <ID>` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑\n"
    text += "`/admin_cancel <ID>` - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n\n"
    
    text += "**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
    text += "`/admin_complete 15` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ15\n"
    text += "`/admin_cancel 20` - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ20\n\n"
    
    text += "**–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–∫–ª—é—á–∞–µ—Ç:**\n"
    text += "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞\n"
    text += "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
    text += "‚Ä¢ üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∑–∞–∫–∞–∑–∞–º–∏\n"
    text += "‚Ä¢ üí¨ –û–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏\n"
    text += "‚Ä¢ ü§ñ –°—Ç–∞—Ç—É—Å –ò–ò —Å–µ—Ä–≤–∏—Å–∞\n"
    text += "‚Ä¢ üì• –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ –ë–î"
    
    await message.answer(text, parse_mode='Markdown')

@admin_router.message(Command("get_id"))
async def get_user_id(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ Telegram ID"""
    user_id = message.from_user.id
    first_name = message.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    username = message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'
    
    # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown
    text = f"üÜî –í–∞—à Telegram ID: {user_id}\n\n"
    text += f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
    text += f"‚Ä¢ –ò–º—è: {first_name}\n"
    text += f"‚Ä¢ Username: @{username}\n"
    text += f"‚Ä¢ ID: {user_id}\n\n"
    text += f"üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∫–∏:\n"
    text += f"–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à ID –≤ —Ñ–∞–π–ª config.txt:\n"
    text += f"ADMIN_IDS={user_id},1003589165"
    
    await message.answer(text)

@admin_router.message(Command("check_admin"))
async def check_admin_status(message: Message, config: BotConfig):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω —Å—Ç–∞—Ç—É—Å–∞"""
    is_admin = config.is_admin(message.from_user.id)
    admin_ids = config.admin_ids
    
    text = f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω —Å—Ç–∞—Ç—É—Å–∞\n\n"
    text += f"–í–∞—à ID: {message.from_user.id}\n"
    text += f"–ê–¥–º–∏–Ω —Å—Ç–∞—Ç—É—Å: {'‚úÖ –î–ê' if is_admin else '‚ùå –ù–ï–¢'}\n"
    text += f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {admin_ids}\n\n"
    text += f"–°–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ: {'‚úÖ –î–ê' if message.from_user.id in admin_ids else '‚ùå –ù–ï–¢'}"
    
    await message.answer(text)

@admin_router.message(Command("update_menu"))
async def force_update_menu(message: Message, config: BotConfig):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    is_admin = config.is_admin(message.from_user.id)
    
    print(f"DEBUG force_update_menu: user_id = {message.from_user.id}")
    print(f"DEBUG force_update_menu: is_admin = {is_admin}")
    print(f"DEBUG force_update_menu: admin_ids = {config.admin_ids}")
    
    await message.answer(
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n\n"
        f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}",
        reply_markup=get_main_menu_keyboard(is_admin=is_admin)
    )

@admin_router.message(Command("test_admin"))
async def test_admin_button(message: Message, config: BotConfig):
    """–¢–µ—Å—Ç –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∏"""
    is_admin = config.is_admin(message.from_user.id)
    
    if is_admin:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫–æ–π
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")],
                [KeyboardButton(text="üîô –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        await message.answer("üîß –¢–µ—Å—Ç–æ–≤–∞—è –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")

@admin_router.message(F.text == "üîô –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é")
async def back_to_normal_menu(message: Message, config: BotConfig):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ–±—ã—á–Ω–æ–º—É –º–µ–Ω—é"""
    is_admin = config.is_admin(message.from_user.id)
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard(is_admin=is_admin)
    )