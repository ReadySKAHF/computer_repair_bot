"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ..database.queries import DatabaseQueries
from ..config import BotConfig
from ..keyboards.main_menu import get_main_menu_keyboard


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
admin_router = Router()


def is_admin(user_id: int, config: BotConfig) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in config.admin_ids


def get_admin_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üìã –ó–∞–∫–∞–∑—ã", callback_data="admin_orders"),
            InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="admin_support")
        ],
        [
            InlineKeyboardButton(text="ü§ñ –ò–ò —Å–µ—Ä–≤–∏—Å", callback_data="admin_ai"),
            InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton(text="üì• –ë—ç–∫–∞–ø –ë–î", callback_data="admin_backup"),
            InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data="admin_reload")
        ],
        [
            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])
    return keyboard


@admin_router.message(Command("admin"))
async def show_admin_panel(message: Message, state: FSMContext, db_queries: DatabaseQueries):
    """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò TELEGRAM ID
    admin_ids = [123456789, 987654321]  # ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò ID –°–Æ–î–ê
    
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db_queries.get_statistics()
        
        text = "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        text += f"**–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        text += f"üìã –ó–∞–∫–∞–∑–æ–≤: {stats.get('total_orders', 0)}\n"
        text += f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats.get('average_rating', 0)}\n"
        text += f"üí¨ –û–±—Ä–∞—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('support_requests_today', 0)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        
        keyboard = get_admin_main_keyboard()
        await message.answer(text, reply_markup=keyboard, parse_mode='Markdown')
        await state.clear()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_panel: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")


@admin_router.callback_query(F.data == "admin_stats")
async def show_admin_statistics(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    admin_ids = [123456789, 987654321]  # ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò ID –°–Æ–î–ê
    
    if callback.from_user.id not in admin_ids:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        stats = await db_queries.get_statistics()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        status_counts = {
            'pending': 0,
            'confirmed': 0,
            'in_progress': 0,
            'completed': 0,
            'cancelled': 0
        }
        total_revenue = 0
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            sample_orders = []
            for user_id in range(1, 100):  # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —Å–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã
                user_orders = await db_queries.get_user_orders(user_id, 50)
                if user_orders:
                    sample_orders.extend(user_orders)
            
            for order in sample_orders:
                status = order.get('status', 'unknown')
                if status in status_counts:
                    status_counts[status] += 1
                
                if status == 'completed':
                    total_revenue += order.get('total_cost', 0)
        
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é
            pass
        
        text = "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        text += f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('total_users', 0)}\n\n"
        
        text += f"**–ó–∞–∫–∞–∑—ã:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_orders', 0)}\n"
        text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.get('orders_today', 0)}\n"
        
        status_names = {
            'pending': '–û–∂–∏–¥–∞—é—Ç',
            'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω—ã',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω—ã'
        }
        
        for status, count in status_counts.items():
            if count > 0:
                status_name = status_names.get(status, status)
                text += f"‚Ä¢ {status_name}: {count}\n"
        
        text += f"\n**–§–∏–Ω–∞–Ω—Å—ã:**\n"
        text += f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue}‚ÇΩ\n"
        
        text += f"\n**–û—Ç–∑—ã–≤—ã:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats.get('total_reviews', 0)}\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats.get('average_rating', 0)}\n"
        
        text += f"\n**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**\n"
        text += f"‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('support_requests_today', 0)}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_statistics: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@admin_router.callback_query(F.data == "admin_orders")
async def show_admin_orders(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"""
    admin_ids = [123456789, 987654321]  # ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò ID –°–Æ–î–ê
    
    if callback.from_user.id not in admin_ids:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        text = "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏**\n\n"
        text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
        text += "`/admin_complete <ID>` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑\n"
        text += "`/admin_cancel <ID>` - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n"
        text += "`/admin_orders` - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n\n"
        text += "**–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
        text += "`/admin_complete 15` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ15\n\n"
        text += "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/admin_orders`"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤", callback_data="admin_orders_stats")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_orders: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")


@admin_router.callback_query(F.data == "admin_users")
async def show_admin_users(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    admin_ids = [123456789, 987654321]  # ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò ID –°–Æ–î–ê
    
    if callback.from_user.id not in admin_ids:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        stats = await db_queries.get_statistics()
        
        text = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
        text += f"**–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: –ø–æ–¥—Å—á–µ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
        text += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: –ø–æ–¥—Å—á–µ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        
        text += f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
        text += f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        text += f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        text += f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_user_stats")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_users: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@admin_router.callback_query(F.data == "admin_support")
async def show_admin_support(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    admin_ids = [123456789, 987654321]  # ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò ID –°–Æ–î–ê
    
    if callback.from_user.id not in admin_ids:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        support_requests = await db_queries.get_support_requests(10)
        
        text = "üí¨ **–û–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É**\n\n"
        
        if not support_requests:
            text += "–û–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.\n"
        else:
            text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(support_requests)} –æ–±—Ä–∞—â–µ–Ω–∏–π:**\n\n"
            
            for request in support_requests:
                user_name = request['user_name']
                message_preview = request['message'][:50] + "..." if len(request['message']) > 50 else request['message']
                created_at = request['created_at'][:16] if request['created_at'] else ""
                
                text += f"**{user_name}** _{created_at}_\n"
                text += f"{message_preview}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_support")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="admin_support_stats")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_support: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏–π")


@admin_router.callback_query(F.data == "admin_ai")
async def show_admin_ai(callback: CallbackQuery, ai_service):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò —Å–µ—Ä–≤–∏—Å–æ–º"""
    admin_ids = [123456789, 987654321]  # ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò ID –°–Æ–î–ê
    
    if callback.from_user.id not in admin_ids:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ò–ò —Å–µ—Ä–≤–∏—Å–∞
        is_available = ai_service.check_service_availability() if ai_service else False
        
        text = "ü§ñ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò —Å–µ—Ä–≤–∏—Å–æ–º**\n\n"
        text += f"**–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:** {'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' if is_available else 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
        text += f"**–ú–æ–¥–µ–ª—å:** Gemini 1.5 Flash\n"
        text += f"**–†–µ–∑–µ—Ä–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞:** –í–∫–ª—é—á–µ–Ω–∞\n\n"
        
        if is_available:
            text += "‚úÖ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
            text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –ø–æ–ª–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò"
        else:
            text += "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ò–ò —Å–µ—Ä–≤–∏—Å–æ–º\n"
            text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="admin_ai_check")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò", callback_data="admin_ai_stats")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_ai: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ò–ò")


@admin_router.callback_query(F.data == "admin_backup")
async def create_backup(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    admin_ids = [123456789, 987654321]  # ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò ID –°–Æ–î–ê
    
    if callback.from_user.id not in admin_ids:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from ..database.connection import DatabaseManager
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        db_manager = DatabaseManager()
        backup_path = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
        success = await db_manager.backup_database(backup_path)
        
        if success:
            text = f"‚úÖ **–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞**\n\n"
            text += f"–§–∞–π–ª: `{backup_path}`\n"
            text += f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        else:
            text = "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏**\n\n"
            text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω", callback_data="admin_backup")],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ create_backup: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")


@admin_router.callback_query(F.data == "admin_main")
async def back_to_admin_main(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    admin_ids = [123456789, 987654321]  # ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò ID –°–Æ–î–ê
    
    if callback.from_user.id not in admin_ids:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        stats = await db_queries.get_statistics()
        
        text = "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        text += f"**–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        text += f"üìã –ó–∞–∫–∞–∑–æ–≤: {stats.get('total_orders', 0)}\n"
        text += f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats.get('average_rating', 0)}\n"
        text += f"üí¨ –û–±—Ä–∞—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('support_requests_today', 0)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        
        keyboard = get_admin_main_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_admin_main: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")


# === –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===

@admin_router.message(Command("admin_complete"))
async def admin_complete_order(message: Message, db_queries: DatabaseQueries):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    admin_ids = [123456789, 987654321]  # ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò ID –°–Æ–î–ê
    
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer(
                "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/admin_complete <order_id>`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** `/admin_complete 15`",
                parse_mode='Markdown'
            )
            return
        
        order_id = int(command_parts[1])
        success = await db_queries.update_order_status(order_id, 'completed')
        
        if success:
            await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å 'completed'")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_complete_order: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@admin_router.message(Command("admin_cancel"))
async def admin_cancel_order(message: Message, db_queries: DatabaseQueries):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    admin_ids = [123456789, 987654321]  # ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò ID –°–Æ–î–ê
    
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer(
                "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/admin_cancel <order_id>`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** `/admin_cancel 15`",
                parse_mode='Markdown'
            )
            return
        
        order_id = int(command_parts[1])
        success = await db_queries.update_order_status(order_id, 'cancelled')
        
        if success:
            await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–º–µ–Ω–µ–Ω")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_cancel_order: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@admin_router.message(Command("admin_orders"))
async def show_admin_user_orders(message: Message, db_queries: DatabaseQueries):
    """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    admin_ids = [123456789, 987654321]  # ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò ID –°–Æ–î–ê
    
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∞–¥–º–∏–Ω–∞
        orders = await db_queries.get_user_orders(message.from_user.id, 10)
        
        if not orders:
            await message.answer(
                "üìã **–í–∞—à–∏ –∑–∞–∫–∞–∑—ã**\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑:\n"
                "üõ†Ô∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏ ‚Üí –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑"
            )
            return
        
        text = "üìã **–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n\n"
        
        for order in orders:
            order_id = order['id']
            status = order['status']
            date = order['order_date']
            cost = order['total_cost']
            
            status_emoji = {
                'pending': '‚è≥',
                'confirmed': '‚úÖ', 
                'in_progress': 'üîß',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(status, '‚ùì')
            
            text += f"{status_emoji} **–ó–∞–∫–∞–∑ ‚Ññ{order_id}**\n"
            text += f"‚îú –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"‚îú –î–∞—Ç–∞: {date}\n"
            text += f"‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ\n\n"
        
        text += "**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
        text += f"`/admin_complete {orders[0]['id']}` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{orders[0]['id']}\n"
        text += f"`/admin_cancel {orders[0]['id']}` - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{orders[0]['id']}"
        
        await message.answer(text, parse_mode='Markdown')
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_user_orders: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")


@admin_router.message(Command("get_id"))
async def get_user_id(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ Telegram ID"""
    await message.answer(
        f"üÜî **–í–∞—à Telegram ID:** `{message.from_user.id}`\n\n"
        f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"‚Ä¢ –ò–º—è: {message.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"‚Ä¢ Username: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚Ä¢ ID: `{message.from_user.id}`\n\n"
        f"üí° **–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∫–∏:**\n"
        f"–ó–∞–º–µ–Ω–∏—Ç–µ –≤ –∫–æ–¥–µ `admin_ids = [123456789, 987654321]`\n"
        f"–Ω–∞ `admin_ids = [{message.from_user.id}]`",
        parse_mode='Markdown'
    )


@admin_router.message(Command("admin_help"))
async def show_admin_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
    admin_ids = [123456789, 987654321]  # ‚Üê –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò ID –°–Æ–î–ê
    
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    text = "üîß **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º**\n\n"
    text += "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
    text += "`/admin` - –≥–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
    text += "`/get_id` - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID\n"
    text += "`/admin_help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
    
    text += "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:**\n"
    text += "`/admin_orders` - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
    text += "`/admin_complete <ID>` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑\n"
    text += "`/admin_cancel <ID>` - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n\n"
    
    text += "**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
    text += "`/admin_complete 15` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ15\n"
    text += "`/admin_cancel 20` - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ20\n\n"
    
    text += "**–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–∫–ª—é—á–∞–µ—Ç:**\n"
    text += "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞\n"
    text += "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
    text += "‚Ä¢ üí¨ –û–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
    text += "‚Ä¢ ü§ñ –°—Ç–∞—Ç—É—Å –ò–ò —Å–µ—Ä–≤–∏—Å–∞\n"
    text += "‚Ä¢ üì• –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ –ë–î"
    
    await message.answer(text, parse_mode='Markdown')