"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
"""
import logging
import random
from datetime import datetime
from typing import Set
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..database.queries import DatabaseQueries
from ..services.validation_service import ValidationService
from ..keyboards.main_menu import get_main_menu_keyboard
from ..keyboards.order_keyboards import (
    get_services_keyboard, get_time_slots_keyboard, get_dates_keyboard,
    get_address_selection_keyboard, get_order_confirmation_keyboard
)
from ..utils.constants import (
    SECTION_DESCRIPTIONS, SUCCESS_MESSAGES, ERROR_MESSAGES, LIMITS
)


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
orders_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–∞
class OrderStates(StatesGroup):
    selecting_services = State()
    selecting_time = State()
    selecting_date = State()
    selecting_address = State()
    entering_custom_address = State()


async def delete_current_message(message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await message.delete()
    except Exception:
        pass


# === –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê ===

@orders_router.message(F.text == "üõ†Ô∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def start_order_creation(message: Message, state: FSMContext, db_queries: DatabaseQueries, user):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if not user:
        await message.answer(
            "‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n"
            "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏
        services = await db_queries.get_services(0, LIMITS['MAX_SERVICES_PER_PAGE'])
        total_services = await db_queries.get_services_count()
        total_pages = (total_services + LIMITS['MAX_SERVICES_PER_PAGE'] - 1) // LIMITS['MAX_SERVICES_PER_PAGE']
        
        if not services:
            await message.answer(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É—Å–ª—É–≥–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        await state.update_data(
            selected_services=set(),
            page=0,
            total_pages=total_pages
        )
        
        keyboard = get_services_keyboard(services, 0, total_pages, set(), "order_service")
        sent_message = await message.answer(
            f"{SECTION_DESCRIPTIONS['ORDER_CREATION']}\n\n"
            f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}**",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        await state.update_data(current_message_id=sent_message.message_id)
        await state.set_state(OrderStates.selecting_services)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_order_creation: {e}")
        await message.answer(ERROR_MESSAGES['DATABASE_ERROR'])


@orders_router.callback_query(F.data.startswith("order_service_"))
async def handle_service_selection(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥"""
    try:
        callback_parts = callback.data.split("_")
        
        if len(callback_parts) >= 4 and callback_parts[2] == "page":
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            page = int(callback_parts[3])
            await handle_services_pagination(callback, state, db_queries, page)
        else:
            # –í—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ —É—Å–ª—É–≥–∏
            service_id = int(callback_parts[2])
            await toggle_service_selection(callback, state, db_queries, service_id)
    
    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_service_selection: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_service_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_services_pagination(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries, page: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —É—Å–ª—É–≥"""
    try:
        data = await state.get_data()
        selected_services = data.get('selected_services', set())
        
        await state.update_data(page=page)
        
        services = await db_queries.get_services(page, LIMITS['MAX_SERVICES_PER_PAGE'])
        total_services = await db_queries.get_services_count()
        total_pages = (total_services + LIMITS['MAX_SERVICES_PER_PAGE'] - 1) // LIMITS['MAX_SERVICES_PER_PAGE']
        
        keyboard = get_services_keyboard(services, page, total_pages, selected_services, "order_service")
        
        text = f"{SECTION_DESCRIPTIONS['ORDER_CREATION']}\n\n"
        text += f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}**\n\n"
        if selected_services:
            text += f"**–í—ã–±—Ä–∞–Ω–æ —É—Å–ª—É–≥:** {len(selected_services)}"
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_services_pagination: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏")


async def toggle_service_selection(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries, service_id: int):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    try:
        data = await state.get_data()
        selected_services = data.get('selected_services', set())
        page = data.get('page', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—Å–ª—É–≥
        if service_id not in selected_services and len(selected_services) >= LIMITS['MAX_SERVICES_PER_ORDER']:
            await callback.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥: {LIMITS['MAX_SERVICES_PER_ORDER']}")
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
        if service_id in selected_services:
            selected_services.remove(service_id)
        else:
            selected_services.add(service_id)
        
        await state.update_data(selected_services=selected_services)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        services = await db_queries.get_services(page, LIMITS['MAX_SERVICES_PER_PAGE'])
        total_services = await db_queries.get_services_count()
        total_pages = (total_services + LIMITS['MAX_SERVICES_PER_PAGE'] - 1) // LIMITS['MAX_SERVICES_PER_PAGE']
        
        keyboard = get_services_keyboard(services, page, total_pages, selected_services, "order_service")
        
        text = f"{SECTION_DESCRIPTIONS['ORDER_CREATION']}\n\n"
        text += f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}**\n\n"
        if selected_services:
            text += f"**–í—ã–±—Ä–∞–Ω–æ —É—Å–ª—É–≥:** {len(selected_services)}"
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ toggle_service_selection: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏")


@orders_router.callback_query(F.data == "confirm_order")
async def confirm_services_selection(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        data = await state.get_data()
        selected_services = data.get('selected_services', set())
        
        if not selected_services:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É!")
            return
        
        await state.set_state(OrderStates.selecting_time)
        
        keyboard = get_time_slots_keyboard()
        await callback.message.edit_text(
            f"{SECTION_DESCRIPTIONS['TIME_SELECTION']}",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ confirm_services_selection: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É—Å–ª—É–≥")


@orders_router.callback_query(F.data.startswith("time_"))
async def handle_time_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        time = callback.data.split("_")[1]
        await state.update_data(order_time=time)
        await state.set_state(OrderStates.selecting_date)
        
        keyboard = get_dates_keyboard()
        await callback.message.edit_text(
            f"{SECTION_DESCRIPTIONS['DATE_SELECTION']}\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: **{time}**\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_time_selection: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏")


@orders_router.callback_query(F.data.startswith("date_"))
async def handle_date_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    try:
        date = callback.data.split("_")[1]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        data = await state.get_data()
        time = data.get('order_time')
        
        is_valid, error_msg, datetime_data = ValidationService.validate_date_time(date, time)
        if not is_valid:
            await callback.answer(error_msg)
            return
        
        await state.update_data(order_date=date)
        await state.set_state(OrderStates.selecting_address)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = datetime_data['date_obj'].strftime('%d.%m.%Y')
        
        keyboard = get_address_selection_keyboard()
        await callback.message.edit_text(
            f"{SECTION_DESCRIPTIONS['ADDRESS_SELECTION']}\n\n"
            f"**–í—Ä–µ–º—è:** {time}\n"
            f"**–î–∞—Ç–∞:** {formatted_date}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–µ–∑–¥–∞ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_date_selection: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã")


@orders_router.callback_query(F.data == "address_profile")
async def use_profile_address(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries, user):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await state.update_data(order_address=user['address'])
        await show_order_summary(callback, state, db_queries)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ use_profile_address: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞")


@orders_router.callback_query(F.data == "address_custom")
async def use_custom_address(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    await state.set_state(OrderStates.entering_custom_address)
    await callback.message.edit_text(
        "üìç **–í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–µ–∑–¥–∞ –º–∞—Å—Ç–µ—Ä–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10, –∫–≤. 15",
        parse_mode='Markdown'
    )
    await callback.answer()


@orders_router.message(OrderStates.entering_custom_address)
async def process_custom_address(message: Message, state: FSMContext, db_queries: DatabaseQueries):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_current_message(message)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
        is_valid, error_msg, cleaned_address = ValidationService.validate_profile_update_data('address', message.text)
        if not is_valid:
            await message.answer(error_msg)
            return
        
        await state.update_data(order_address=cleaned_address)
        await show_order_summary_after_address(message, state, db_queries)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_custom_address: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞")


async def show_order_summary(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries):
    """–ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ –∑–∞–∫–∞–∑–∞ (–∏–∑ callback)"""
    try:
        data = await state.get_data()
        summary_text, keyboard = await build_order_summary(data, db_queries)
        
        await callback.message.edit_text(summary_text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_order_summary: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ –∑–∞–∫–∞–∑–∞")


async def show_order_summary_after_address(message: Message, state: FSMContext, db_queries: DatabaseQueries):
    """–ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ –∑–∞–∫–∞–∑–∞ (–ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞)"""
    try:
        data = await state.get_data()
        summary_text, keyboard = await build_order_summary(data, db_queries)
        
        await message.answer(summary_text, reply_markup=keyboard, parse_mode='Markdown')
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_order_summary_after_address: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ –∑–∞–∫–∞–∑–∞")


async def build_order_summary(data: dict, db_queries: DatabaseQueries) -> tuple:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –∑–∞–∫–∞–∑–∞"""
    selected_services = data.get('selected_services', set())
    order_time = data.get('order_time')
    order_date = data.get('order_date')
    order_address = data.get('order_address')
    
    if not selected_services:
        raise ValueError("–ù–µ –≤—ã–±—Ä–∞–Ω—ã —É—Å–ª—É–≥–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö
    services_info = []
    total_cost = 0
    total_duration = 0
    
    for service_id in selected_services:
        service = await db_queries.get_service_by_id(service_id)
        if service:
            services_info.append({
                'name': service['name'],
                'price': service['price'],
                'duration': service['duration_minutes']
            })
            total_cost += service['price']
            total_duration += service['duration_minutes']
    
    if not services_info:
        raise ValueError("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    masters = await db_queries.get_masters()
    master = random.choice(masters) if masters else None
    
    if master:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        from aiogram.fsm.context import FSMContext
        # –≠—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –≤—ã–∑—ã–≤–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
        # await state.update_data(master_id=master['id'], total_cost=total_cost)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    formatted_date = datetime.strptime(order_date, '%Y-%m-%d').strftime('%d.%m.%Y')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    text = f"{SECTION_DESCRIPTIONS['ORDER_CONFIRMATION']}"
    text += "üõ†Ô∏è **–£—Å–ª—É–≥–∏:**\n"
    for service in services_info:
        text += f"‚Ä¢ {service['name']} - {service['price']}‚ÇΩ\n"
    
    text += f"\nüìÖ **–î–∞—Ç–∞:** {formatted_date}"
    text += f"\nüïê **–í—Ä–µ–º—è:** {order_time}"
    text += f"\nüìç **–ê–¥—Ä–µ—Å:** {order_address}"
    text += f"\nüë®‚Äçüîß **–ú–∞—Å—Ç–µ—Ä:** {master['name'] if master else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}"
    text += f"\n‚è±Ô∏è **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {total_duration} –º–∏–Ω"
    text += f"\nüí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_cost}‚ÇΩ"
    
    keyboard = get_order_confirmation_keyboard()
    
    return text, keyboard


@orders_router.callback_query(F.data == "final_confirm")
async def final_confirm_order(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        masters = await db_queries.get_masters()
        master = random.choice(masters) if masters else None
        
        if not master:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        selected_services = data.get('selected_services', set())
        total_cost = 0
        for service_id in selected_services:
            service = await db_queries.get_service_by_id(service_id)
            if service:
                total_cost += service['price']
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        is_valid, error_msg, validated_data = ValidationService.validate_order_data(
            user_id=callback.from_user.id,
            master_id=master['id'],
            address=data.get('order_address'),
            date_str=data.get('order_date'),
            time_str=data.get('order_time'),
            service_ids=list(selected_services)
        )
        
        if not is_valid:
            await callback.answer(error_msg)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
        order_id = await db_queries.create_order(
            user_id=validated_data['user_id'],
            master_id=validated_data['master_id'],
            address=validated_data['address'],
            order_date=validated_data['order_date'],
            order_time=validated_data['order_time'],
            total_cost=total_cost,
            service_ids=validated_data['service_ids']
        )
        
        if order_id:
            await callback.message.edit_text(
                f"üéâ **–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n"
                f"**–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:** ‚Ññ{order_id}\n\n"
                f"–ú–∞—Å—Ç–µ—Ä **{master['name']}** —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤¬ª.",
                parse_mode='Markdown'
            )
            
            logging.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        else:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        
        await state.clear()
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ final_confirm_order: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")


# === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===

@orders_router.callback_query(F.data == "back_to_services")
async def back_to_services(callback: CallbackQuery, state: FSMContext, db_queries: DatabaseQueries):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥"""
    try:
        data = await state.get_data()
        selected_services = data.get('selected_services', set())
        page = data.get('page', 0)
        
        services = await db_queries.get_services(page, LIMITS['MAX_SERVICES_PER_PAGE'])
        total_services = await db_queries.get_services_count()
        total_pages = (total_services + LIMITS['MAX_SERVICES_PER_PAGE'] - 1) // LIMITS['MAX_SERVICES_PER_PAGE']
        
        keyboard = get_services_keyboard(services, page, total_pages, selected_services, "order_service")
        
        text = f"{SECTION_DESCRIPTIONS['ORDER_CREATION']}\n\n"
        text += f"**–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}**\n\n"
        if selected_services:
            text += f"**–í—ã–±—Ä–∞–Ω–æ —É—Å–ª—É–≥:** {len(selected_services)}"
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await state.set_state(OrderStates.selecting_services)
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_services: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —É—Å–ª—É–≥–∞–º")


@orders_router.callback_query(F.data == "back_to_time")
async def back_to_time(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏"""
    keyboard = get_time_slots_keyboard()
    await callback.message.edit_text(
        f"{SECTION_DESCRIPTIONS['TIME_SELECTION']}",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    await state.set_state(OrderStates.selecting_time)
    await callback.answer()


@orders_router.callback_query(F.data == "back_to_date")
async def back_to_date(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
    data = await state.get_data()
    time = data.get('order_time')
    
    keyboard = get_dates_keyboard()
    await callback.message.edit_text(
        f"{SECTION_DESCRIPTIONS['DATE_SELECTION']}\n\n"
        f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: **{time}**\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    await state.set_state(OrderStates.selecting_date)
    await callback.answer()