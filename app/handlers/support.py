"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..database.queries import DatabaseQueries
from ..services.validation_service import ValidationService
from ..keyboards.main_menu import get_main_menu_keyboard
from ..keyboards.profile_keyboards import get_support_keyboard, get_faq_keyboard
from ..utils.constants import SECTION_DESCRIPTIONS, SUCCESS_MESSAGES


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
support_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
class SupportStates(StatesGroup):
    writing_message = State()


async def delete_current_message(message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await message.delete()
    except Exception:
        pass


# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ü–û–î–î–ï–†–ñ–ö–ò ===

@support_router.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def show_support_menu(message: Message, state: FSMContext, user):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    if not user:
        await message.answer(
            "‚ùå –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n"
            "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        return
    
    try:
        text = f"{SECTION_DESCRIPTIONS['SUPPORT_REQUEST']}"
        
        keyboard = get_support_keyboard()
        sent_message = await message.answer(
            text, 
            reply_markup=keyboard, 
            parse_mode='Markdown'
        )
        await state.update_data(current_message_id=sent_message.message_id)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_support_menu: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@support_router.callback_query(F.data == "write_support")
async def start_support_message(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    await callback.message.edit_text(
        "üí¨ **–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É**\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.\n"
        "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–æ–º–æ–≥—É—Ç!\n\n"
        "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é:**\n"
        "‚Ä¢ –û—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ, —Å –∫–∞–∫–∏–º –∑–∞–∫–∞–∑–æ–º —Å–≤—è–∑–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)",
        parse_mode='Markdown'
    )
    await state.set_state(SupportStates.writing_message)
    await callback.answer()


@support_router.message(SupportStates.writing_message)
async def process_support_message(message: Message, state: FSMContext, db_queries: DatabaseQueries):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_current_message(message)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        is_valid, error_msg, cleaned_message = ValidationService.validate_support_request_data(message.text)
        
        if not is_valid:
            await message.answer(error_msg)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ë–î
        success = await db_queries.save_support_request(message.from_user.id, cleaned_message)
        
        if success:
            await message.answer(
                f"üìù **–û–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!**\n\n"
                f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
                f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                f"**–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n{cleaned_message[:200]}{'...' if len(cleaned_message) > 200 else ''}",
                reply_markup=get_main_menu_keyboard(),
                parse_mode='Markdown'
            )
            
            logging.info(
                f"–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: "
                f"{cleaned_message[:50]}..."
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.",
                reply_markup=get_main_menu_keyboard()
            )
        
        await state.clear()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_support_message: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()


# === FAQ ===

@support_router.callback_query(F.data == "faq")
async def show_faq(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    keyboard = get_faq_keyboard()
    
    await callback.message.edit_text(
        "‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    await callback.answer()


@support_router.callback_query(F.data == "faq_order")
async def faq_how_to_order(callback: CallbackQuery):
    """FAQ: –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"""
    text = "‚ùì **–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?**\n\n"
    text += "**–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n\n"
    text += "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üõ†Ô∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑¬ª\n"
    text += "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª—É–≥–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞\n"
    text += "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∏–∑–∏—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞\n"
    text += "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (–¥–æ—Å—Ç—É–ø–Ω—ã –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π)\n"
    text += "5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—ã–µ–∑–¥–∞ –º–∞—Å—Ç–µ—Ä–∞\n"
    text += "6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑\n\n"
    text += "**–í–∞–∂–Ω–æ:**\n"
    text += "‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª—É–≥ –≤ –æ–¥–Ω–æ–º –∑–∞–∫–∞–∑–µ\n"
    text += "‚Ä¢ –ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n"
    text += "‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ†Ô∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order")],
        [InlineKeyboardButton(text="üîô –ö FAQ", callback_data="faq")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
    await callback.answer()


@support_router.callback_query(F.data == "faq_payment")
async def faq_payment(callback: CallbackQuery):
    """FAQ: –û–ø–ª–∞—Ç–∞"""
    text = "üí∞ **–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?**\n\n"
    text += "**–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**\n"
    text += "‚Ä¢ üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –º–∞—Å—Ç–µ—Ä—É\n"
    text += "‚Ä¢ üí≥ –ö–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª\n"
    text += "‚Ä¢ üì± –ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É\n\n"
    text += "**–ö–æ–≥–¥–∞ –ø–ª–∞—Ç–∏—Ç—å:**\n"
    text += "‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç\n"
    text += "‚Ä¢ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n"
    text += "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞\n\n"
    text += "**–ì–∞—Ä–∞–Ω—Ç–∏–∏:**\n"
    text += "‚Ä¢ –í—Å–µ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π\n"
    text += "‚Ä¢ –í —Å–ª—É—á–∞–µ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã - –ø–µ—Ä–µ–¥–µ–ª–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
    text += "‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —á–µ–∫ –∏–ª–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é"
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥", callback_data="view_services")],
        [InlineKeyboardButton(text="üîô –ö FAQ", callback_data="faq")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
    await callback.answer()


@support_router.callback_query(F.data == "faq_timing")
async def faq_timing(callback: CallbackQuery):
    """FAQ: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    text = "‚è∞ **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç**\n\n"
    text += "**–¢–∏–ø–∏—á–Ω–æ–µ –≤—Ä–µ–º—è:**\n"
    text += "‚Ä¢ üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: 30 –º–∏–Ω—É—Ç\n"
    text += "‚Ä¢ üßπ –ß–∏—Å—Ç–∫–∞ –æ—Ç –ø—ã–ª–∏: 45 –º–∏–Ω—É—Ç\n"
    text += "‚Ä¢ üñ•Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Windows: 1.5 —á–∞—Å–∞\n"
    text += "‚Ä¢ üîß –ó–∞–º–µ–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: 30-60 –º–∏–Ω—É—Ç\n"
    text += "‚Ä¢ ü¶† –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—É—Å–æ–≤: 45 –º–∏–Ω—É—Ç\n\n"
    text += "**–§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –≤—Ä–µ–º—è:**\n"
    text += "‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã\n"
    text += "‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n"
    text += "‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç\n\n"
    text += "**–°—Ä–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:**\n"
    text += "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–µ–∑–¥–∞ –≤ –¥–µ–Ω—å –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
    text += "‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º —Å 10:00 –¥–æ 22:00\n"
    text += "‚Ä¢ –í –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏"
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ†Ô∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order")],
        [InlineKeyboardButton(text="üîô –ö FAQ", callback_data="faq")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
    await callback.answer()


@support_router.callback_query(F.data == "faq_warranty")
async def faq_warranty(callback: CallbackQuery):
    """FAQ: –ì–∞—Ä–∞–Ω—Ç–∏—è"""
    text = "üõ°Ô∏è **–ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—ã**\n\n"
    text += "**–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º:**\n"
    text += "‚Ä¢ ‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç\n"
    text += "‚Ä¢ ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö\n"
    text += "‚Ä¢ ‚úÖ –°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
    text += "‚Ä¢ ‚úÖ –ß–∏—Å—Ç–æ—Ç—É —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞\n\n"
    text += "**–°—Ä–æ–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏:**\n"
    text += "‚Ä¢ üîß –†–µ–º–æ–Ω—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: 6 –º–µ—Å—è—Ü–µ–≤\n"
    text += "‚Ä¢ üñ•Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü–û: 1 –º–µ—Å—è—Ü\n"
    text += "‚Ä¢ üßπ –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã: 1 –º–µ—Å—è—Ü\n"
    text += "‚Ä¢ üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –Ω–∞ HDD/SSD\n\n"
    text += "**–í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º:**\n"
    text += "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–µ–∑–¥\n"
    text += "‚Ä¢ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—á–µ—Ç–æ–≤ –∑–∞ –Ω–∞—à —Å—á–µ—Ç\n"
    text += "‚Ä¢ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–∏ –¥–æ–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∏–Ω–µ –º–∞—Å—Ç–µ—Ä–∞"
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="write_support")],
        [InlineKeyboardButton(text="üîô –ö FAQ", callback_data="faq")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
    await callback.answer()


@support_router.callback_query(F.data == "faq_ai")
async def faq_ai_consultation(callback: CallbackQuery):
    """FAQ: –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"""
    text = "ü§ñ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?**\n\n"
    text += "**–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ:**\n"
    text += "‚Ä¢ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º\n"
    text += "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —É—Å–ª—É–≥–∏\n"
    text += "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π Google Gemini\n\n"
    text += "**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
    text += "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ò–ò¬ª\n"
    text += "2Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ\n"
    text += "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å–ª—É–≥–∞–º\n"
    text += "4Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —É—Å–ª—É–≥–∏ –≤ –∑–∞–∫–∞–∑ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º\n\n"
    text += "**–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**\n"
    text += "‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –ø–æ–¥—Ä–æ–±–Ω–æ\n"
    text += "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–¥–∞ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞—á–∞–ª–∞—Å—å\n"
    text += "‚Ä¢ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ –¥–µ–ª–∞—Ç—å\n\n"
    text += "**–¢–æ—á–Ω–æ—Å—Ç—å:** 85-90% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="new_ai_consultation")],
        [InlineKeyboardButton(text="üí° –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º", callback_data="ai_examples")],
        [InlineKeyboardButton(text="üîô –ö FAQ", callback_data="faq")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
    await callback.answer()


# === –ö–û–ù–¢–ê–ö–¢–´ ===

@support_router.callback_query(F.data == "contacts")
async def show_contacts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    text = "üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n"
    text += "**–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**\n"
    text += "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
    text += "üí¨ Telegram: @support_bot\n"
    text += "üìß Email: support@repair.com\n\n"
    text += "**–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:**\n"
    text += "üïò –ü–Ω-–ü—Ç: 9:00 - 21:00\n"
    text += "üïò –°–±-–í—Å: 10:00 - 18:00\n\n"
    text += "**–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å:**\n"
    text += "üì± +7 (XXX) XXX-XX-XX (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)\n\n"
    text += "**–ê–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞:**\n"
    text += "üìç –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1"
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="write_support")],
        [InlineKeyboardButton(text="üîô –ö –ø–æ–¥–¥–µ—Ä–∂–∫–µ", callback_data="support")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
    await callback.answer()


# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–î–î–ï–†–ñ–ö–ò (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ===

@support_router.callback_query(F.data == "support_stats")
async def show_support_statistics(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        support_requests = await db_queries.get_support_requests(50)
        
        if not support_requests:
            text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n–û–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
            text += f"**–í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π:** {len(support_requests)}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
            text += "**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:**\n"
            for i, request in enumerate(support_requests[:5], 1):
                user_name = request['user_name']
                message_preview = request['message'][:50] + "..." if len(request['message']) > 50 else request['message']
                created_at = request['created_at'][:16] if request['created_at'] else ""
                
                text += f"{i}. **{user_name}** _{created_at}_\n"
                text += f"   {message_preview}\n\n"
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –ø–æ–¥–¥–µ—Ä–∂–∫–µ", callback_data="support")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_support_statistics: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")