"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..database.queries import DatabaseQueries
from ..services.ai_service import AIConsultationService
from ..services.validation_service import ValidationService
from ..keyboards.main_menu import get_main_menu_keyboard
from ..keyboards.order_keyboards import get_ai_services_keyboard, get_time_slots_keyboard
from ..utils.constants import SECTION_DESCRIPTIONS, ERROR_MESSAGES, SUCCESS_MESSAGES


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
ai_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
class AIConsultationStates(StatesGroup):
    waiting_for_problem = State()
    selecting_time = State()
    selecting_date = State()
    selecting_address = State()
    entering_custom_address = State()


async def delete_current_message(message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await message.delete()
    except Exception:
        pass


# === –ò–ò –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø ===

@ai_router.message(F.text == "ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ò–ò")
async def start_ai_consultation(message: Message, state: FSMContext, user):
    """–ù–∞—á–∞–ª–æ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not user:
        await message.answer(
            "‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n"
            "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        return
    
    try:
        sent_message = await message.answer(
            f"{SECTION_DESCRIPTIONS['AI_CONSULTATION']}",
            parse_mode='Markdown'
        )
        await state.update_data(current_message_id=sent_message.message_id)
        await state.set_state(AIConsultationStates.waiting_for_problem)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_ai_consultation: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@ai_router.message(AIConsultationStates.waiting_for_problem)
async def process_ai_consultation(message: Message, state: FSMContext, 
                                db_queries: DatabaseQueries, ai_service: AIConsultationService, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_current_message(message)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
        is_valid, error_msg, cleaned_problem = ValidationService.validate_ai_problem_data(message.text)
        
        if not is_valid:
            await message.answer(error_msg)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—É...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
            all_services = []
            page = 0
            while True:
                services_page = await db_queries.get_services(page, 100)
                if not services_page:
                    break
                all_services.extend(services_page)
                page += 1
            
            if not all_services:
                await delete_current_message(loading_msg)
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É—Å–ª—É–≥–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                await state.clear()
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ò–ò —Å–µ—Ä–≤–∏—Å
            result = await ai_service.process_consultation(cleaned_problem, all_services)
            
            await delete_current_message(loading_msg)
            
            if not result['success']:
                await message.answer(
                    f"‚ùå **–û—à–∏–±–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏**\n\n{result['error']}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode='Markdown'
                )
                await state.clear()
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            text = "ü§ñ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ò–ò**\n\n"
            text += f"**–í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞:** {cleaned_problem[:100]}{'...' if len(cleaned_problem) > 100 else ''}\n\n"
            
            if result.get('fallback'):
                text += "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑):**\n"
            else:
                text += "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò:**\n"
            
            text += f"{result['ai_response']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —É—Å–ª—É–≥–∞—Ö
            if result['recommended_services']:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
                valid_services = ai_service.validate_recommended_services(
                    result['recommended_services'], all_services
                )
                
                if valid_services:
                    services_text, total_cost = ai_service.format_services_info(valid_services, all_services)
                    
                    text += "**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Å–ª—É–≥–∏:**\n"
                    text += services_text
                    text += f"\nüí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_cost}‚ÇΩ"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ state (–ù–ï –û–ß–ò–©–ê–ï–ú STATE!)
                    await state.update_data(recommended_services=valid_services)
                    
                    keyboard = get_ai_services_keyboard(has_services=True)
                else:
                    text += "\n‚ùì –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ."
                    keyboard = get_ai_services_keyboard(has_services=False)
            else:
                text += "\n‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã."
                keyboard = get_ai_services_keyboard(has_services=False)
            
            sent_message = await message.answer(text, reply_markup=keyboard, parse_mode='Markdown')
            await state.update_data(current_message_id=sent_message.message_id)
            
            # –ù–ï –û–ß–ò–©–ê–ï–ú STATE! –î–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            
            await delete_current_message(loading_msg)
            
            await message.answer(
                f"{ERROR_MESSAGES['AI_ERROR']}\n\n"
                "**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ò–ò\n" 
                "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=get_main_menu_keyboard(is_admin=is_admin),
                parse_mode='Markdown'
            )
            await state.clear()
    
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_ai_consultation: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()


@ai_router.callback_query(F.data == "add_ai_services")
async def add_ai_recommended_services(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ò–ò —É—Å–ª—É–≥ –≤ –∑–∞–∫–∞–∑"""
    try:
        data = await state.get_data()
        recommended_services = data.get('recommended_services', [])
        
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"=== –û–¢–õ–ê–î–ö–ê add_ai_services ===")
        logging.info(f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ state: {data}")
        logging.info(f"recommended_services –∏–∑ state: {recommended_services}")
        logging.info(f"–¢–∏–ø recommended_services: {type(recommended_services)}")
        
        if not recommended_services:
            logging.error("‚ùå recommended_services –ø—É—Å—Ç–æ–π –∏–ª–∏ None")
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∫–∞–∫ set –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å—Ç–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞–∫–∞–∑–æ–≤
        await state.update_data(selected_services=set(recommended_services))
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
        from ..handlers.orders import OrderStates
        await state.set_state(OrderStates.selecting_time)
        
        keyboard = get_time_slots_keyboard()
        await callback.message.edit_text(
            f"üïê **–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏**\n\n"
            f"**–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –æ—Ç –ò–ò:**\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥: {len(recommended_services)}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∏–∑–∏—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ª—É–≥–∏ –ò–ò –≤ –∑–∞–∫–∞–∑: {recommended_services}")
        await callback.answer(SUCCESS_MESSAGES['AI_SERVICES_ADDED'])
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_ai_recommended_services: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥ –≤ –∑–∞–∫–∞–∑")


@ai_router.callback_query(F.data == "new_ai_consultation")
async def new_ai_consultation(callback: CallbackQuery, state: FSMContext):
    """–ù–æ–≤–∞—è –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"""
    # –û—á–∏—â–∞–µ–º state —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    await state.clear()
    
    await callback.message.edit_text(
        f"{SECTION_DESCRIPTIONS['AI_CONSULTATION']}",
        parse_mode='Markdown'
    )
    await state.set_state(AIConsultationStates.waiting_for_problem)
    await callback.answer()


# === –ò–°–¢–û–†–ò–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ô (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è) ===

@ai_router.callback_query(F.data == "ai_history")
async def show_ai_consultation_history(callback: CallbackQuery, db_queries: DatabaseQueries):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    try:
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        await callback.message.edit_text(
            "üìã **–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π**\n\n"
            "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
            "–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.",
            parse_mode='Markdown'
        )
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_ai_consultation_history: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")


# === –ù–ê–°–¢–†–û–ô–ö–ò –ò–ò (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ===

@ai_router.callback_query(F.data == "ai_settings")
async def show_ai_settings(callback: CallbackQuery, ai_service: AIConsultationService):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò —Å–µ—Ä–≤–∏—Å–∞
        is_available = ai_service.check_service_availability()
        
        text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞**\n\n"
        text += f"**–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:** {'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' if is_available else 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
        text += f"**–ú–æ–¥–µ–ª—å:** Gemini 1.5 Flash\n"
        text += f"**–†–µ–∑–µ—Ä–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞:** –í–∫–ª—é—á–µ–Ω–∞\n\n"
        
        if is_available:
            text += "‚úÖ –ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        else:
            text += "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ò–ò —Å–µ—Ä–≤–∏—Å–æ–º\n"
            text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_ai_status")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_ai_settings: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@ai_router.callback_query(F.data == "check_ai_status")
async def check_ai_status(callback: CallbackQuery, ai_service: AIConsultationService):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ò–ò —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ò–ò...")
        
        is_available = ai_service.check_service_availability()
        
        if is_available:
            text = "‚úÖ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n–ò–ò —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        else:
            text = "‚ùå **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n–ò–ò —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        await callback.message.edit_text(text, parse_mode='Markdown')
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_ai_status: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")


# === –ü–†–ò–ú–ï–†–´ –ü–†–û–ë–õ–ï–ú ===

@ai_router.callback_query(F.data == "ai_examples")
async def show_problem_examples(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"""
    try:
        text = "üí° **–ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º**\n\n"
        text += "**–•–æ—Ä–æ—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã:**\n\n"
        text += "‚Ä¢ –ö–æ–º–ø—å—é—Ç–µ—Ä —Å—Ç–∞–ª –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º. "
        text += "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã —à—É–º—è—Ç –≥—Ä–æ–º—á–µ –æ–±—ã—á–Ω–æ–≥–æ.\n\n"
        text += "‚Ä¢ –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å –æ—à–∏–±–∫–æ–π. "
        text += "–≠—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n"
        text += "‚Ä¢ –í –∏–≥—Ä–∞—Ö —Å—Ç–∞–ª–∏ –ø–æ—è–≤–ª—è—Ç—å—Å—è –ª–∞–≥–∏ –∏ –Ω–∏–∑–∫–∏–π FPS. "
        text += "–†–∞–Ω—å—à–µ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–ª–æ –ø–ª–∞–≤–Ω–æ.\n\n"
        text += "‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –≤—Å–ø–ª—ã–≤–∞—é—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–∫–Ω–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ, "
        text += "–∫–æ–º–ø—å—é—Ç–µ—Ä —Å–∞–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–∞–π—Ç—ã.\n\n"
        text += "**–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!**"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="new_ai_consultation")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_problem_examples: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤")